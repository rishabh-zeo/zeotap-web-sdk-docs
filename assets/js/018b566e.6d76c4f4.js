"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[3606],{6943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Examples/examples","title":"Implementation Examples","description":"Practical examples and implementation patterns for the Zeotap React Native SDK.","source":"@site/docs/reactnativesdk/Examples/examples.md","sourceDirName":"Examples","slug":"/Examples/","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/Examples/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752145107000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Implementation Examples","description":"Practical examples and implementation patterns for the Zeotap React Native SDK."},"sidebar":"gtm","previous":{"title":"Custom Consent Management","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/Consent/customConsent"}}');var s=t(4848),a=t(8453);const i={sidebar_position:1,title:"Implementation Examples",description:"Practical examples and implementation patterns for the Zeotap React Native SDK."},o="Implementation Examples",c={},l=[{value:"Basic Setup Example",id:"basic-setup-example",level:2},{value:"E-commerce Implementation",id:"e-commerce-implementation",level:2},{value:"Product Tracking",id:"product-tracking",level:3},{value:"Purchase Flow",id:"purchase-flow",level:3},{value:"User Authentication",id:"user-authentication",level:2},{value:"Login/Registration",id:"loginregistration",level:3},{value:"Consent Management Implementation",id:"consent-management-implementation",level:2},{value:"Custom Consent Dialog",id:"custom-consent-dialog",level:3},{value:"Navigation Tracking",id:"navigation-tracking",level:2},{value:"React Navigation Integration",id:"react-navigation-integration",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:2},{value:"App State Tracking",id:"app-state-tracking",level:3},{value:"Error Tracking",id:"error-tracking",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Environment-Based Setup",id:"environment-based-setup",level:3},{value:"Testing and Debugging",id:"testing-and-debugging",level:2},{value:"Development Helpers",id:"development-helpers",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"implementation-examples",children:"Implementation Examples"})}),"\n",(0,s.jsx)(n.p,{children:"This guide provides practical examples and implementation patterns for common use cases with the Zeotap React Native SDK."}),"\n",(0,s.jsx)(n.h2,{id:"basic-setup-example",children:"Basic Setup Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// App.js\nimport React, { useEffect } from 'react';\nimport { View } from 'react-native';\nimport { initialiseZeoCollect } from 'zeo-collect';\n\nconst App = () => {\n    useEffect(() => {\n        const options = {\n            android_write_key: \"YOUR_ANDROID_WRITE_KEY\",\n            ios_write_key: \"YOUR_IOS_WRITE_KEY\",\n            batch_size: 30,\n            service_interval: 90,\n            use_consent: true,\n            check_for_cmp: false\n        };\n\n        initialiseZeoCollect(options, (response) => {\n            console.log('SDK initialized:', response);\n        });\n    }, []);\n\n    return <YourAppContent />;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"e-commerce-implementation",children:"E-commerce Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"product-tracking",children:"Product Tracking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { setEventProperties, setPageProperties } from \'zeo-collect\';\n\nconst ProductScreen = ({ product }) => {\n    useEffect(() => {\n        // Set page context\n        setPageProperties({\n            page_title: "Product Details",\n            category: product.category,\n            product_id: product.id\n        });\n\n        // Track product view\n        setEventProperties("product_viewed", {\n            product_id: product.id,\n            product_name: product.name,\n            category: product.category,\n            price: product.price,\n            currency: "USD",\n            availability: product.inStock ? "in_stock" : "out_of_stock"\n        });\n    }, [product]);\n\n    const handleAddToCart = () => {\n        setEventProperties("add_to_cart", {\n            product_id: product.id,\n            quantity: 1,\n            price: product.price,\n            cart_total: calculateCartTotal()\n        });\n    };\n\n    return (\n        <View>\n            <ProductDetails product={product} />\n            <Button title="Add to Cart" onPress={handleAddToCart} />\n        </View>\n    );\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"purchase-flow",children:"Purchase Flow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const CheckoutScreen = () => {\n    const handlePurchase = async (orderData) => {\n        try {\n            const result = await processPayment(orderData);\n            \n            // Track successful purchase\n            setEventProperties("purchase_completed", {\n                transaction_id: result.transactionId,\n                revenue: orderData.total,\n                currency: orderData.currency,\n                items: orderData.items.map(item => ({\n                    product_id: item.id,\n                    quantity: item.quantity,\n                    price: item.price\n                })),\n                payment_method: orderData.paymentMethod\n            });\n        } catch (error) {\n            // Track failed purchase\n            setEventProperties("purchase_failed", {\n                error_code: error.code,\n                error_message: error.message,\n                attempted_amount: orderData.total\n            });\n        }\n    };\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"user-authentication",children:"User Authentication"}),"\n",(0,s.jsx)(n.h3,{id:"loginregistration",children:"Login/Registration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { setUserIdentities, setUserProperties, setEventProperties } from \'zeo-collect\';\n\nconst AuthService = {\n    login: async (credentials) => {\n        try {\n            const user = await apiLogin(credentials);\n            \n            // Set user identities\n            setUserIdentities({\n                email: user.email,\n                loginid: user.username,\n                cellno: user.phone\n            });\n\n            // Set user properties\n            setUserProperties({\n                user_tier: user.subscriptionTier,\n                registration_date: user.createdAt,\n                last_login: new Date().toISOString()\n            });\n\n            // Track login event\n            setEventProperties("user_login", {\n                login_method: "email",\n                user_tier: user.subscriptionTier\n            });\n\n            return user;\n        } catch (error) {\n            setEventProperties("login_failed", {\n                error_type: error.type,\n                login_method: "email"\n            });\n            throw error;\n        }\n    },\n\n    logout: () => {\n        // Clear user identities\n        unSetUserIdentities();\n        \n        // Track logout\n        setEventProperties("user_logout");\n    }\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"consent-management-implementation",children:"Consent Management Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"custom-consent-dialog",children:"Custom Consent Dialog"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import React, { useState, useEffect } from 'react';\nimport { Modal, View, Text, Button } from 'react-native';\nimport { setConsent, listenToAskForConsent } from 'zeo-collect';\n\nconst ConsentModal = () => {\n    const [visible, setVisible] = useState(false);\n    const [consentTypes, setConsentTypes] = useState({\n        analytics: false,\n        marketing: false,\n        personalization: false\n    });\n\n    useEffect(() => {\n        // Listen for consent requests\n        listenToAskForConsent(() => {\n            setVisible(true);\n        });\n    }, []);\n\n    const handleAcceptAll = () => {\n        const consent = {\n            track: true,\n            identify: true,\n            analyticsConsent: true,\n            marketingConsent: true,\n            personalizationConsent: true\n        };\n\n        setConsent(consent, (response) => {\n            console.log('Consent set:', response);\n            setVisible(false);\n        });\n    };\n\n    const handleRejectAll = () => {\n        const consent = {\n            track: false,\n            identify: false,\n            analyticsConsent: false,\n            marketingConsent: false,\n            personalizationConsent: false\n        };\n\n        setConsent(consent);\n        setVisible(false);\n    };\n\n    const handleCustomConsent = () => {\n        const consent = {\n            track: consentTypes.analytics,\n            identify: consentTypes.analytics,\n            analyticsConsent: consentTypes.analytics,\n            marketingConsent: consentTypes.marketing,\n            personalizationConsent: consentTypes.personalization\n        };\n\n        setConsent(consent);\n        setVisible(false);\n    };\n\n    return (\n        <Modal visible={visible} transparent>\n            <View style={styles.modalContainer}>\n                <View style={styles.consentDialog}>\n                    <Text style={styles.title}>Privacy Preferences</Text>\n                    <Text>We value your privacy. Please choose your data preferences:</Text>\n                    \n                    {/* Custom consent toggles */}\n                    <ConsentToggle \n                        label=\"Analytics\" \n                        value={consentTypes.analytics}\n                        onToggle={(value) => setConsentTypes(prev => ({...prev, analytics: value}))}\n                    />\n                    \n                    <View style={styles.buttonContainer}>\n                        <Button title=\"Accept All\" onPress={handleAcceptAll} />\n                        <Button title=\"Reject All\" onPress={handleRejectAll} />\n                        <Button title=\"Save Preferences\" onPress={handleCustomConsent} />\n                    </View>\n                </View>\n            </View>\n        </Modal>\n    );\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"navigation-tracking",children:"Navigation Tracking"}),"\n",(0,s.jsx)(n.h3,{id:"react-navigation-integration",children:"React Navigation Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { setPageProperties, setEventProperties } from 'zeo-collect';\nimport { useNavigationState } from '@react-navigation/native';\n\nconst NavigationTracker = () => {\n    const navigationState = useNavigationState(state => state);\n\n    useEffect(() => {\n        if (navigationState) {\n            const currentRoute = getCurrentRoute(navigationState);\n            \n            // Track page view\n            setPageProperties({\n                screen_name: currentRoute.name,\n                screen_params: JSON.stringify(currentRoute.params || {}),\n                navigation_stack: getNavigationStack(navigationState)\n            });\n\n            // Track navigation event\n            setEventProperties(\"screen_view\", {\n                screen_name: currentRoute.name,\n                previous_screen: getPreviousScreen(navigationState),\n                navigation_method: \"app_navigation\"\n            });\n        }\n    }, [navigationState]);\n\n    return null;\n};\n\n// Add to your App component\nconst App = () => {\n    return (\n        <NavigationContainer>\n            <NavigationTracker />\n            <YourNavigationStack />\n        </NavigationContainer>\n    );\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,s.jsx)(n.h3,{id:"app-state-tracking",children:"App State Tracking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { AppState } from 'react-native';\nimport { setEventProperties } from 'zeo-collect';\n\nconst AppStateTracker = () => {\n    useEffect(() => {\n        const handleAppStateChange = (nextAppState) => {\n            setEventProperties(\"app_state_change\", {\n                app_state: nextAppState,\n                timestamp: new Date().toISOString()\n            });\n        };\n\n        const subscription = AppState.addEventListener('change', handleAppStateChange);\n        return () => subscription?.remove();\n    }, []);\n\n    return null;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"error-tracking",children:"Error Tracking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { setEventProperties } from 'zeo-collect';\n\nconst ErrorBoundary = ({ children }) => {\n    const [hasError, setHasError] = useState(false);\n\n    const handleError = (error, errorInfo) => {\n        setHasError(true);\n        \n        // Track error\n        setEventProperties(\"app_error\", {\n            error_message: error.message,\n            error_stack: error.stack,\n            component_stack: errorInfo.componentStack,\n            timestamp: new Date().toISOString()\n        });\n    };\n\n    if (hasError) {\n        return <ErrorFallback />;\n    }\n\n    return children;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"environment-based-setup",children:"Environment-Based Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const getSDKConfig = () => {\n    const baseConfig = {\n        android_write_key: Config.ANDROID_WRITE_KEY,\n        ios_write_key: Config.IOS_WRITE_KEY,\n    };\n\n    if (__DEV__) {\n        return {\n            ...baseConfig,\n            logging: true,\n            batch_size: 10,\n            service_interval: 30\n        };\n    }\n\n    return {\n        ...baseConfig,\n        logging: false,\n        batch_size: 50,\n        service_interval: 120,\n        max_cache_size: 200\n    };\n};\n\n// Initialize with environment config\ninitialiseZeoCollect(getSDKConfig());\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-and-debugging",children:"Testing and Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"development-helpers",children:"Development Helpers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const DebugPanel = () => {\n    const [events, setEvents] = useState([]);\n\n    const trackTestEvent = () => {\n        const testEvent = {\n            event_name: "test_event",\n            timestamp: new Date().toISOString(),\n            test_data: "debug_value"\n        };\n\n        setEventProperties("debug_test", testEvent, (response) => {\n            setEvents(prev => [...prev, { ...testEvent, response }]);\n        });\n    };\n\n    if (!__DEV__) return null;\n\n    return (\n        <View style={styles.debugPanel}>\n            <Button title="Send Test Event" onPress={trackTestEvent} />\n            <ScrollView>\n                {events.map((event, index) => (\n                    <Text key={index}>{JSON.stringify(event, null, 2)}</Text>\n                ))}\n            </ScrollView>\n        </View>\n    );\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initialize Early"}),": Set up the SDK in your app's entry point"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Page Context"}),": Always set page properties before tracking events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Implement callbacks for critical events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consent First"}),": Handle consent before any tracking"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Optimization"}),": Configure batch sizes based on your app's usage patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development vs Production"}),": Use different configs for different environments"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["For more detailed API documentation, see our ",(0,s.jsx)(n.a,{href:"../APIReference/",children:"API Reference"})," section."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);