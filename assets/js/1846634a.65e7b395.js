"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[3378],{7017:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"APIReference/setUserIdentities","title":"Track User Identities","description":"Persistently identify users by associating various identifiers with their activity.","source":"@site/docs/reactnativesdk/APIReference/setUserIdentities.md","sourceDirName":"APIReference","slug":"/APIReference/setUserIdentities","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/APIReference/setUserIdentities","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752145107000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Track User Identities","description":"Persistently identify users by associating various identifiers with their activity."},"sidebar":"gtm","previous":{"title":"API Reference","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/category/api-reference-2"},"next":{"title":"Track Page View Events","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/APIReference/setPageProperties"}}');var a=s(4848),t=s(8453);const r={sidebar_position:1,title:"Track User Identities",description:"Persistently identify users by associating various identifiers with their activity."},l="Track User Identities",d={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Understanding Identifier Types",id:"understanding-identifier-types",level:2},{value:"Choosing Your Hashing Strategy",id:"choosing-your-hashing-strategy",level:2},{value:"Sending Raw Identifiers",id:"sending-raw-identifiers",level:3},{value:"Sending Pre-Hashed Identifiers",id:"sending-pre-hashed-identifiers",level:3},{value:"SDK Performs Hashing",id:"sdk-performs-hashing",level:3},{value:"PII Identifier Key Reference",id:"pii-identifier-key-reference",level:3},{value:"Custom Identities",id:"custom-identities",level:2},{value:"Set User identities with callbacks",id:"set-user-identities-with-callbacks",level:2},{value:"Removing User identities",id:"removing-user-identities",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Privacy Considerations",id:"privacy-considerations",level:2},{value:"Error Handling",id:"error-handling",level:2}];function o(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"track-user-identities",children:"Track User Identities"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"setUserIdentities"})," method is used to identify users by associating them with specific identifiers (like email, phone number, or your own internal IDs). This is crucial for cross-session user tracking and building comprehensive user profiles."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Why use it?"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"User Stitching:"})," Allows Zeotap to link user activity across different sessions or devices when a known identifier is provided."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Data Enrichment:"})," Provides key identifiers needed for potential data enrichment processes."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audience Building:"})," Enables creating audiences based on specific known identifiers."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"Persistence",type:"tip",children:(0,a.jsxs)(n.p,{children:["Identifiers set using ",(0,a.jsx)(n.code,{children:"setUserIdentities()"})," are persisted and automatically included in the ",(0,a.jsx)(n.code,{children:"user"})," node of the payload for all subsequent events sent during the user's session(s)."]})}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities(identities, callback)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Required"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"identities"}),(0,a.jsx)(n.td,{children:"Object"}),(0,a.jsx)(n.td,{children:"Yes"}),(0,a.jsx)(n.td,{children:"An object containing user identity key-value pairs"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"callback"}),(0,a.jsx)(n.td,{children:"Function"}),(0,a.jsx)(n.td,{children:"Optional"}),(0,a.jsx)(n.td,{children:"Callback to handle function response"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"understanding-identifier-types",children:"Understanding Identifier Types"}),"\n",(0,a.jsx)(n.p,{children:"You can send different categories of identifiers:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Personal Identifiable Information (PII):"})," Standardized identifiers like email or phone number. These can be sent raw or pre-hashed."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Custom Identities:"})," Your own first-party identifiers (e.g., ",(0,a.jsx)(n.code,{children:"crmId"}),", ",(0,a.jsx)(n.code,{children:"loyaltyId"}),"). Hashing configurations don't apply to these."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"choosing-your-hashing-strategy",children:"Choosing Your Hashing Strategy"}),"\n",(0,a.jsxs)(n.p,{children:["Before using ",(0,a.jsx)(n.code,{children:"setUserIdentities"}),", you must decide how PII (like email and phone numbers) will be handled regarding hashing. This choice affects your SDK configuration and the keys you use in the ",(0,a.jsx)(n.code,{children:"setUserIdentities"})," call. Click on each scenario below for details:"]}),"\n",(0,a.jsx)("div",{style:{display:"flex",alignItems:"baseline",gap:"15px"},children:(0,a.jsx)(n.h3,{id:"sending-raw-identifiers",children:"Sending Raw Identifiers"})}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Scenario 1: Sending Raw Identifiers (Implementation Steps)"})}),(0,a.jsx)("p",{children:"This approach involves sending the user's actual, readable identifiers (like email or phone number) directly to the Zeotap SDK. It's often the simplest method as you don't handle hashing yourself; Zeotap's backend takes care of processing."}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Implementation Steps:"})}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Configure the SDK Initialization:"}),"\nTo use this scenario, you ",(0,a.jsx)(n.strong,{children:"must"})," explicitly tell the SDK ",(0,a.jsx)(n.em,{children:"not"})," to perform hashing itself and confirm that the data you will provide is ",(0,a.jsx)(n.em,{children:"not"})," already hashed. This is done during the ",(0,a.jsx)(n.code,{children:"initialiseZeoCollect"})," call:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="SDK Initialization for Raw Identifiers"',children:'import { initialiseZeoCollect } from \'zeo-collect\';\n\nconst options = {\n    android_write_key: "YOUR_ANDROID_WRITE_KEY",\n    ios_write_key: "YOUR_IOS_WRITE_KEY",\n    hash_identities: false,      // Crucial: Tells the SDK *NOT* to hash the values itself.\n    are_identities_hashed: false // Crucial: Confirms the values you\'ll provide are *NOT* already hashed.\n};\n\ninitialiseZeoCollect(options);\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"This configuration ensures the SDK passes the raw values you provide directly to the Zeotap backend without attempting client-side hashing."})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Send Identifiers Using Standard Keys and Raw Values:"}),"\nOnce the SDK is initialized correctly for this scenario, call ",(0,a.jsx)(n.code,{children:"setUserIdentities"}),". Use the standard, recognized keys for PII (like ",(0,a.jsx)(n.code,{children:"email"}),", ",(0,a.jsx)(n.code,{children:"cellno"}),", ",(0,a.jsx)(n.code,{children:"loginid"}),") and provide the ",(0,a.jsx)(n.strong,{children:"actual, raw user data"})," as the values. You can also include any custom identifiers."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Implementation Example:"})}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Email (Raw)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Email"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    email: \"example@gmail.com\" // Provide the actual email address\n});\n"})}),(0,a.jsx)(n.p,{children:"The email will be passed in the payload of the network call:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {9-9}',children:'    "events": [\n        {\n        "event": {\n            "eventName": "goToHome",\n            "eventTimestamp": 1745959356443\n        },\n        "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "email": "example@gmail.com" //raw email sent\n        },\n        "page": { /* ... */ },\n        "version": "1.3.8"\n        }\n    ]\n'})})]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Cell phone (Raw)"})}),(0,a.jsx)("p",{children:"To send the user's raw cell phone number in Scenario 1:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Use the standard key: ",(0,a.jsx)("code",{children:"cellno"}),"."]}),(0,a.jsx)("li",{children:"Provide the actual, unhashed phone number string as the value."}),(0,a.jsxs)("li",{children:[(0,a.jsx)("strong",{children:"Highly Recommended Format:"})," Use ",(0,a.jsx)("code",{children:"'[code] [number]'"})," (e.g., ",(0,a.jsx)("code",{children:"'1 5551234567'"}),"). While the SDK sends the raw value in this scenario, this format ensures the best processing and matching on the Zeotap backend."]})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Cell Phone"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    cellno: \"1 5551234567\" // Provide the actual phone number\n});\n"})}),(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"cellno"})," will be passed in the payload:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {9-9}',children:'    "events": [\n        {\n        "event": {\n            "eventName": "pageView",\n            "eventTimestamp": 1745960123456\n        },\n        "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "cellno": "1 5551234567" // Raw cellno sent\n        },\n        "page": { /* ... */ },\n        "version": "1.3.8"\n        }\n    ]\n'})})]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Login ID (Raw)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Login ID"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    loginid: \"testuser\" // Provide the actual login ID\n});\n"})}),(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"loginid"})," will be passed in the payload:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {6-6}',children:'    "events": [\n        {\n         "event": { /* ... */ },\n         "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "loginid": "testuser" // Raw loginid sent\n         },\n         "page": { /* ... */ }\n        }\n    ]\n'})})]}),"\n"]}),"\n"]})]}),"\n",(0,a.jsx)("div",{style:{display:"flex",alignItems:"baseline",gap:"15px"},children:(0,a.jsx)(n.h3,{id:"sending-pre-hashed-identifiers",children:"Sending Pre-Hashed Identifiers"})}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Scenario 2: Sending Pre-Hashed Identifiers (Implementation Steps)"})}),(0,a.jsxs)("p",{children:["In this scenario, your application (e.g., server-side or separate client-side logic) hashes PII ",(0,a.jsx)(n.em,{children:"before"})," sending it to the SDK. You must use specific keys corresponding to the hash type you generated."]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Implementation Steps:"})}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Configure the SDK Initialization:"}),"\nTell the SDK ",(0,a.jsx)(n.em,{children:"not"})," to hash again and that the values you provide ",(0,a.jsx)(n.em,{children:"are"})," already hashed."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="SDK Initialization for Pre-Hashed Identifiers"',children:'import { initialiseZeoCollect } from \'zeo-collect\';\n\nconst options = {\n    android_write_key: "YOUR_ANDROID_WRITE_KEY",\n    ios_write_key: "YOUR_IOS_WRITE_KEY",\n    hash_identities: false,      // Optional but good practice: Tell SDK NOT to hash again.\n    are_identities_hashed: true  // Crucial: Tells the SDK the values ARE pre-hashed.\n};\n\ninitialiseZeoCollect(options);\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"This configuration ensures the SDK expects hashed keys and values."})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.strong,{children:["Send Identifiers using ",(0,a.jsx)(n.code,{children:"setUserIdentities"}),":"]}),"\nUse the specific ",(0,a.jsx)(n.strong,{children:"hashed keys"})," that match your hashing algorithm and format, providing the pre-computed hash value."]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Email (Hashed)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Pre-Hashed Email (SHA-256 Lowercase)"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    // SHA-256 hash of the lowercase email\n    email_sha256_lowercase: \"a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2\"\n});\n"})}),(0,a.jsx)(n.p,{children:"The specific hashed email key and value will be passed in the payload:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {6-6}',children:'    "events": [\n        {\n         "event": { /* ... */ },\n         "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "email": { "sha256_lowercase": "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2" } // Hashed key/value sent\n         },\n         "page": { /* ... */ }\n        }\n    ]\n'})})]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Cell Phone (Hashed)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Pre-Hashed Cell Phone (SHA-256 with Country Code)"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    // SHA-256 hash of the phone including country code (e.g., '1 5551234567')\n    cellno_with_country_code_sha256: \"f6e5d4c3b2a1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4\",\n    // SHA-256 hash of the phone without country code (e.g., '5551234567')\n    cellno_without_country_code_sha256: \"f6e5d4c3b2a1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4\"\n});\n"})}),(0,a.jsx)(n.p,{children:"The specific hashed cell phone key and value will be passed in the payload:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {8-9}',children:'    "events": [\n        {\n         "event": { /* ... */ },\n         "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "cellno_with_country_code": {"sha256": "f6e5d4c3b2a1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4"}, // Hashed key/value sent\n            "cellno_without_country_code": {"sha256": "f6e5d4c3b2a1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4"} // Hashed key/value sent\n         },\n         "page": { /* ... */ }\n        }\n    ]\n'})})]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Login ID (Hashed)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Pre-Hashed Login ID (SHA-256 Lowercase)"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    // SHA-256 hash of the lowercase login ID\n    loginid_sha256_lowercase: \"g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2a3b4c5d6e7f8\"\n});\n"})}),(0,a.jsx)(n.p,{children:"The specific hashed login ID key and value will be passed in the payload:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {6-6}',children:'    "events": [\n        {\n         "event": { /* ... */ },\n         "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "loginid": {"sha256_lowercase": "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2a3b4c5d6e7f8"} // Hashed key/value sent\n         },\n         "page": { /* ... */ }\n        }\n    ]\n'})})]}),"\n"]}),"\n"]})]}),"\n",(0,a.jsx)("div",{style:{display:"flex",alignItems:"baseline",gap:"15px"},children:(0,a.jsx)(n.h3,{id:"sdk-performs-hashing",children:"SDK Performs Hashing"})}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Scenario 3: SDK Performs Hashing (Client-Side Implementation)"})}),(0,a.jsxs)("p",{children:["In this scenario, you provide raw PII to the SDK function, but configure the SDK to hash these values ",(0,a.jsx)(n.em,{children:"before"})," sending the data over the network. This enhances privacy by preventing raw PII from leaving the device via SDK network requests."]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Implementation Steps:"})}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Configure the SDK Initialization:"}),"\nEnable the SDK's built-in hashing and confirm that the values you will provide are raw."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="SDK Initialization for SDK Hashing"',children:'import { initialiseZeoCollect } from \'zeo-collect\';\n\nconst options = {\n    android_write_key: "YOUR_ANDROID_WRITE_KEY",\n    ios_write_key: "YOUR_IOS_WRITE_KEY",\n    hash_identities: true,       // Crucial: Tells the SDK TO perform hashing.\n    are_identities_hashed: false // Crucial: Confirms the values you\'ll provide are RAW.\n};\n\ninitialiseZeoCollect(options);\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"This configuration activates the SDK's internal hashing mechanism for specific PII keys."})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.strong,{children:["Send Identifiers using ",(0,a.jsx)(n.code,{children:"setUserIdentities"}),":"]}),"\nUse the standard, recognized ",(0,a.jsx)(n.strong,{children:"raw keys"})," for PII and provide the ",(0,a.jsx)(n.strong,{children:"actual, raw user data"}),". The SDK will hash ",(0,a.jsx)(n.code,{children:"email"}),", ",(0,a.jsx)(n.code,{children:"cellno"}),", and ",(0,a.jsx)(n.code,{children:"loginid"})," internally before sending."]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Email (Raw - SDK Hashes)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Email (SDK will hash)"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    email: \"user@example.com\" // Provide RAW email\n});\n"})}),(0,a.jsx)(n.p,{children:"The SDK will hash the email (SHA-256 lowercase by default) and send the hashed value in the payload:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload (SDK Hashed)" {6-13}',children:'    "events": [\n        {\n         "event": { /* ... */ },\n         "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "email": {\n                "sha256_lowercase": "sha256_hash_of_user@example.com", // SDK generated\n                "sha256_uppercase": "sha256_hash_of_USER@EXAMPLE.COM", // SDK generated\n                "md5_lowercase": "md5_hash_of_user@example.com",   // SDK generated\n                "md5_uppercase": "md5_hash_of_USER@EXAMPLE.COM",   // SDK generated\n                "sha1_lowercase": "sha1_hash_of_user@example.com",  // SDK generated\n                "sha1_uppercase": "sha1_hash_of_USER@EXAMPLE.COM"   // SDK generated\n            }\n         },\n         "page": { /* ... */ }\n        }\n    ]\n'})})]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Cell Phone (Raw - SDK Hashes)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Cell Phone (SDK will hash)"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    cellno: \"1 5551234567\" // Provide RAW phone in correct format\n});\n"})}),(0,a.jsx)(n.p,{children:"The SDK will generate multiple hashes (SHA-256, MD5, SHA-1) for each representation (without country code, with country code, E.164) and send them in the payload:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload (SDK Hashed - Cellno)" {6-20}',children:'    "events": [\n        {\n         "event": { /* ... */ },\n         "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "cellno_without_country_code": { // Hashes of \'5551234567\'\n                "sha256": "sha256_hash_of_5551234567",\n                "md5": "md5_hash_of_5551234567",\n                "sha1": "sha1_hash_of_5551234567"\n            },\n            "cellno_with_country_code": { // Hashes of \'1 5551234567\'\n                "sha256": "sha256_hash_of_15551234567",\n                "md5": "md5_hash_of_15551234567",\n                "sha1": "sha1_hash_of_15551234567"\n            },\n            "cellphone_number_e164": { // Hashes of \'1 5551234567\'\n                "sha256": "sha256_hash_of_15551234567",\n                "md5": "md5_hash_of_15551234567",\n                "sha1": "sha1_hash_of_15551234567"\n            }\n         },\n         "page": { /* ... */ }\n        }\n    ]\n'})})]}),"\n",(0,a.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,a.jsx)("summary",{children:(0,a.jsx)("strong",{children:"Login ID (Raw - SDK Hashes)"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Login ID (SDK will hash)"',children:"import { setUserIdentities } from 'zeo-collect';\n\nsetUserIdentities({\n    loginid: \"UserLogin123\" // Provide RAW login ID\n});\n"})}),(0,a.jsxs)(n.p,{children:["The SDK will generate multiple standard hashes (SHA-256, MD5, SHA-1, lower/upper case) and send them nested under the ",(0,a.jsx)(n.code,{children:"loginid"})," key in the payload:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload (SDK Hashed - Login ID)" {6-12}',children:'    "events": [\n        {\n         "event": { /* ... */ },\n         "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "loginid": {\n                "sha256_lowercase": "hash_of_userlogin123", // SDK generated\n                "sha256_uppercase": "hash_of_USERLOGIN123", // SDK generated\n                "md5_lowercase": "md5_hash_of_userlogin123",   // SDK generated\n                "md5_uppercase": "md5_hash_of_USERLOGIN123",   // SDK generated\n                "sha1_lowercase": "sha1_hash_of_userlogin123",  // SDK generated\n                "sha1_uppercase": "sha1_hash_of_USERLOGIN123"   // SDK generated\n            }\n         },\n         "page": { /* ... */ }\n        }\n    ]\n'})})]}),"\n"]}),"\n"]})]}),"\n",(0,a.jsx)(n.h3,{id:"pii-identifier-key-reference",children:"PII Identifier Key Reference"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{style:{textAlign:"left"},children:"PII Property"}),(0,a.jsxs)(n.th,{style:{textAlign:"left"},children:["Key to Use if Sending RAW ",(0,a.jsx)("br",{})," ",(0,a.jsx)(n.em,{children:"(Scenarios 1 & 3)"})]}),(0,a.jsxs)(n.th,{style:{textAlign:"left"},children:["Key to Use if Sending PRE-HASHED ",(0,a.jsx)("br",{})," ",(0,a.jsx)(n.em,{children:"(Scenario 2 Only)"})]}),(0,a.jsx)(n.th,{style:{textAlign:"left"},children:"Description & Important Notes"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{style:{textAlign:"left"},children:(0,a.jsx)(n.strong,{children:"Email"})}),(0,a.jsx)(n.td,{style:{textAlign:"left"},children:(0,a.jsx)(n.code,{children:"email"})}),(0,a.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,a.jsx)(n.code,{children:"email_sha256_lowercase"}),",",(0,a.jsx)(n.code,{children:"email_sha256_uppercase"}),", ",(0,a.jsx)(n.code,{children:"email_md5_lowercase"}),", ",(0,a.jsx)(n.code,{children:"email_md5_uppercase"}),", ",(0,a.jsx)(n.code,{children:"email_sha1_lowercase"}),", ",(0,a.jsx)(n.code,{children:"email_sha1_uppercase"})]}),(0,a.jsxs)(n.td,{style:{textAlign:"left"},children:["User's email address. Use the ",(0,a.jsx)(n.code,{children:"email"})," key for raw input. Use one of the specific hashed keys (like ",(0,a.jsx)(n.code,{children:"email_sha256_lowercase"}),") if you provide a pre-hashed value."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{style:{textAlign:"left"},children:(0,a.jsx)(n.strong,{children:"Cell Phone"})}),(0,a.jsx)(n.td,{style:{textAlign:"left"},children:(0,a.jsx)(n.code,{children:"cellno"})}),(0,a.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,a.jsx)(n.code,{children:"cellno_without_country_code_sha256"}),", ",(0,a.jsx)(n.code,{children:"cellno_without_country_code_md5"}),", ",(0,a.jsx)(n.code,{children:"cellno_without_country_code_sha1"}),", ",(0,a.jsx)(n.code,{children:"cellno_with_country_code_sha256"}),", ",(0,a.jsx)(n.code,{children:"cellno_with_country_code_md5"}),",",(0,a.jsx)(n.code,{children:"cellno_with_country_code_sha1"})]}),(0,a.jsxs)(n.td,{style:{textAlign:"left"},children:["User's cell phone number. ",(0,a.jsx)("br",{})," ",(0,a.jsx)(n.strong,{children:"For Raw:"})," Use ",(0,a.jsx)(n.code,{children:"cellno"}),". ",(0,a.jsx)(n.strong,{children:"Recommended Format:"})," For best results, use ",(0,a.jsx)(n.code,{children:"'[code] [number]'"})," (e.g., ",(0,a.jsx)(n.code,{children:"'1 5551234567'"}),"). ",(0,a.jsx)("br",{})," ",(0,a.jsx)(n.strong,{children:"For Pre-Hashed:"})," Use the specific key matching your hash type (e.g., ",(0,a.jsx)(n.code,{children:"cellno_with_country_code_sha256"}),")."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{style:{textAlign:"left"},children:(0,a.jsx)(n.strong,{children:"Login ID"})}),(0,a.jsx)(n.td,{style:{textAlign:"left"},children:(0,a.jsx)(n.code,{children:"loginid"})}),(0,a.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,a.jsx)(n.code,{children:"loginid_sha256_lowercase"}),",",(0,a.jsx)(n.code,{children:"loginid_sha256_uppercase"}),", ",(0,a.jsx)(n.code,{children:"loginid_md5_lowercase"}),", ",(0,a.jsx)(n.code,{children:"loginid_md5_uppercase"}),", ",(0,a.jsx)(n.code,{children:"loginid_sha1_lowercase"}),", ",(0,a.jsx)(n.code,{children:"loginid_sha1_uppercase"})]}),(0,a.jsxs)(n.td,{style:{textAlign:"left"},children:["User's login ID. Use the ",(0,a.jsx)(n.code,{children:"loginid"})," key for raw input. Use one of the specific hashed keys if you provide a pre-hashed value."]})]})]})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"How to Use This Table:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Identify the PII Property"})," you want to send (e.g., Email, Cell Phone)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Determine your Hashing Scenario:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scenario 1 (Raw) or 3 (SDK Hashing):"}),' Look at the "Key to Use if Sending RAW" column. Use that key (e.g., ',(0,a.jsx)(n.code,{children:"email"}),", ",(0,a.jsx)(n.code,{children:"cellno"}),") and provide the ",(0,a.jsx)(n.em,{children:"raw"})," value. Pay attention to the recommended format for ",(0,a.jsx)(n.code,{children:"cellno"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scenario 2 (Pre-Hashed):"}),' Look at the "Key to Use if Sending PRE-HASHED" column. Choose the key that matches the ',(0,a.jsx)(n.em,{children:"exact"})," hashing algorithm and format you used (e.g., ",(0,a.jsx)(n.code,{children:"email_sha256_lowercase"}),", ",(0,a.jsx)(n.code,{children:"cellno_with_country_code_sha256"}),") and provide the ",(0,a.jsx)(n.em,{children:"pre-computed hash"})," value."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Remember:"})," For a single PII property (like email), you will use ",(0,a.jsx)(n.em,{children:"either"})," the raw key ",(0,a.jsx)(n.em,{children:"or"})," a hashed key in your ",(0,a.jsx)(n.code,{children:"setUserIdentities"})," call, never both simultaneously for the same piece of information."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"custom-identities",children:"Custom Identities"}),"\n",(0,a.jsx)(n.p,{children:"You can include any other key-value pairs representing your own first-party identifiers. These are sent as-is and are not affected by the PII hashing configurations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { setUserIdentities } from \'zeo-collect\';\n\nsetUserIdentities({\n    // PII Keys (Raw or Hashed depending on scenario)\n    email: "user@example.com",\n    // Custom Keys\n    crmId: "12345-ABC",\n    visitorId: "analytics_client_id_here"\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"set-user-identities-with-callbacks",children:"Set User identities with callbacks"}),"\n",(0,a.jsxs)(n.p,{children:["You can also set Identities with Callback function as shown below. The data parameter is an object that contains ",(0,a.jsx)(n.code,{children:"status"})," and ",(0,a.jsx)(n.code,{children:"message"})," which helps to debug the status of the function call."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { setUserIdentities } from \'zeo-collect\';\n\nsetUserIdentities({\n    // PII Keys (Raw or Hashed depending on scenario)\n    email: "user@example.com",\n    // Custom Keys\n    crmId: "12345-ABC",\n    visitorId: "analytics_client_id_here"\n}, (data) => {\n    // Implement function to handle response\n    // {status: "SUCCESS", message: "User identities set successfully"}\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"removing-user-identities",children:"Removing User identities"}),"\n",(0,a.jsxs)(n.p,{children:["This method is used to remove user identities that are set by the ",(0,a.jsx)(n.code,{children:"setUserIdentities"})," method. This will remove all the identities from the storage as well from all subsequent events that made by SDK."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { unSetUserIdentities } from 'zeo-collect';\n\nunSetUserIdentities();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Call Early"}),": Set user identities as soon as they are available, typically after user login or app launch if the user is already authenticated."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Use Consistent Identifiers"}),": Ensure the same identifiers are used across all platforms (Web, iOS, Android) for the same user."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Include Multiple Identities"}),": Provide multiple identity types when available to improve user matching accuracy."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Handle Privacy"}),": Ensure you have proper user consent before collecting and sending personal identifiers."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"privacy-considerations",children:"Privacy Considerations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Always ensure you have user consent before collecting personal identifiers"}),"\n",(0,a.jsx)(n.li,{children:"Follow local privacy regulations (GDPR, CCPA, etc.)"}),"\n",(0,a.jsx)(n.li,{children:"Consider hashing sensitive identifiers if required by your privacy policy"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"The method will fail silently if:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The SDK is not initialized"}),"\n",(0,a.jsx)(n.li,{children:"Invalid data types are provided"}),"\n",(0,a.jsx)(n.li,{children:"Network connectivity issues occur (data will be queued for later transmission)"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const a={},t=i.createContext(a);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);