"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[1302],{925:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Consent/customConsent","title":"Custom Consent Management","description":"Manually manage user consent using the Zeotap iOS SDK\'s setConsent API when not using a TCFv2 CMP.","source":"@site/docs/iossdk/Consent/customConsent.md","sourceDirName":"Consent","slug":"/Consent/customConsent","permalink":"/zeotap-web-sdk-docs/iossdk/docs/Consent/customConsent","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752145107000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Custom Consent Management","description":"Manually manage user consent using the Zeotap iOS SDK\'s setConsent API when not using a TCFv2 CMP."},"sidebar":"DocumentationSidebar","previous":{"title":"TCF v2.x / GDPR Compliance","permalink":"/zeotap-web-sdk-docs/iossdk/docs/Consent/gdpr"},"next":{"title":"Examples","permalink":"/zeotap-web-sdk-docs/iossdk/docs/category/examples"}}');var o=t(4848),i=t(8453);const a={sidebar_position:4,title:"Custom Consent Management",description:"Manually manage user consent using the Zeotap iOS SDK's setConsent API when not using a TCFv2 CMP."},r="Custom Consent Management (setConsent API)",c={},l=[{value:"How it Works",id:"how-it-works",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Testing Custom Consent",id:"testing-custom-consent",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"custom-consent-management-setconsent-api",children:"Custom Consent Management (setConsent API)"})}),"\n",(0,o.jsxs)(e.p,{children:["This approach allows you to manage user consent using your own custom logic and user interface (like a custom consent dialog or integration with a non-TCF CMP) and then communicate the user's choices directly to the Zeotap iOS SDK using the ",(0,o.jsx)(e.a,{href:"../APIReference/setConsent",children:(0,o.jsx)(e.code,{children:"setConsent"})})," API call."]}),"\n",(0,o.jsx)(e.p,{children:"This method is suitable when:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"You are not using an IAB TCF v2.x compliant Consent Management Platform (CMP)."}),"\n",(0,o.jsx)(e.li,{children:"You have built your own consent collection mechanism."}),"\n",(0,o.jsx)(e.li,{children:"You need fine-grained control over when and how consent signals are passed to the SDK."}),"\n",(0,o.jsx)(e.li,{children:"You are implementing consent requirements for regulations other than GDPR (though it can be used for GDPR if implemented correctly)."}),"\n",(0,o.jsx)(e.li,{children:"You want to integrate with a non-TCF CMP or custom privacy solution."}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"SDK Configuration:"})," You initialize the Zeotap SDK with specific options to indicate you will be managing consent manually."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"User Interaction:"})," Your app presents a consent mechanism (e.g., a dialog, settings screen) to the user."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Capture Consent:"})," Your app's code captures the user's consent choices (e.g., accepting tracking, accepting specific data uses)."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsxs)(e.strong,{children:["Call ",(0,o.jsx)(e.code,{children:"setConsent"}),":"]})," Your code calls the ",(0,o.jsx)(e.code,{children:"setConsent()"})," function, passing a dictionary representing the user's consent status."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"SDK Action:"})," The Zeotap SDK receives this consent object, stores it locally, and uses it to determine whether subsequent tracking calls should proceed."]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(e.p,{children:["To enable Custom Consent Management, you ",(0,o.jsx)(e.strong,{children:"must"})," configure the SDK during initialization as follows:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-swift",children:'// SDK Initialization for Custom Consent\nvar collectOptions = CollectOption()\n    .writeKey(value: "YOUR_WRITE_KEY")\n    // --- Configuration for Custom Consent ---\n    .useConsent(value: true)           // REQUIRED: Enables consent features\n    .checkForCMP(value: false)         // REQUIRED: Tells the SDK *not* to look for TCF CMP data\n    .build()\n\nCollect.initialize(option: collectOptions)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"testing-custom-consent",children:"Testing Custom Consent"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-swift",children:'// Test granting consent\nCollect.getInstance()?.setConsent(["track": true]) \n        \n// Test denying consent\nCollect.getInstance()?.setConsent(["track": false])\n        \n// Test mixed consent\nCollect.getInstance()?.setConsent([\n    "track": true,\n    "marketingConsent": false\n])\n'})}),"\n",(0,o.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"../Configurations/consentOptions",children:"Consent Configuration Options"}),": Detailed configuration options for consent management"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"../APIReference/setConsent",children:"Set Consent API"}),": Complete API reference for the setConsent method"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"./consentStrategy",children:"Choosing a Consent Strategy"}),": Guide to choosing the right consent approach"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"./gdpr",children:"GDPR/TCF Integration"}),": Alternative approach using TCF-compliant CMPs"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var s=t(6540);const o={},i=s.createContext(o);function a(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);