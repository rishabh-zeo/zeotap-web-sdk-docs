"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[5710],{8453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>c});var r=t(6540);const n={},i=r.createContext(n);function a(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:s},e.children)}},9883:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"APIReference/setUserProperties","title":"Setting User Properties","description":"Send user attributes as a dedicated event.","source":"@site/docs/iossdk/APIReference/setUserProperties.md","sourceDirName":"APIReference","slug":"/APIReference/setUserProperties","permalink":"/zeotap-web-sdk-docs/iossdk/docs/APIReference/setUserProperties","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752145107000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Setting User Properties","description":"Send user attributes as a dedicated event."},"sidebar":"DocumentationSidebar","previous":{"title":"Track User Events","permalink":"/zeotap-web-sdk-docs/iossdk/docs/APIReference/track"},"next":{"title":"Track User Consent","permalink":"/zeotap-web-sdk-docs/iossdk/docs/APIReference/setConsent"}}');var n=t(4848),i=t(8453);const a={sidebar_position:4,title:"Setting User Properties",description:"Send user attributes as a dedicated event."},c="Setting User Properties",o={},d=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Set User properties with callbacks",id:"set-user-properties-with-callbacks",level:2},{value:"Best Practices",id:"best-practices",level:2}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"setting-user-properties",children:"Setting User Properties"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"setUserProperties"})," method is used to set persistent attributes about a user. These properties should represent relatively stable characteristics of your users, such as subscription status, preferences, or demographic information."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Key Characteristics:"})}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Sent as Event:"})," Calling ",(0,n.jsx)(s.code,{children:"setUserProperties"})," triggers an event with the event name ",(0,n.jsx)(s.code,{children:"set_user_properties"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Non-Persistent:"})," The properties sent via this method are associated with this specific ",(0,n.jsx)(s.code,{children:"set_user_properties"})," event. They are ",(0,n.jsx)(s.strong,{children:"not"})," automatically persisted in the storage or automatically included with subsequent, different events (like page views or custom events triggered by ",(0,n.jsx)(s.code,{children:"setEventProperties"}),")."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Distinct from ",(0,n.jsx)(s.a,{href:"./setUserIdentities",children:(0,n.jsx)(s.code,{children:"setUserIdentities"})}),":"]})," This function is different from ",(0,n.jsx)(s.code,{children:"setUserIdentities"}),", which is used for establishing and persisting core user identifiers. ",(0,n.jsx)(s.code,{children:"setUserProperties"})," is for sending additional, often more dynamic or contextual, user-level attributes."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-swift",children:"Collect.getInstance().setUserProperties(_ properties: [String: Any], _ callback: ResponseCallback?)\n"})}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Parameter"}),(0,n.jsx)(s.th,{children:"Type"}),(0,n.jsx)(s.th,{children:"Required"}),(0,n.jsx)(s.th,{children:"Description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"properties"}),(0,n.jsx)(s.td,{children:"[String: Any]"}),(0,n.jsx)(s.td,{children:"Yes"}),(0,n.jsx)(s.td,{children:"A dictionary containing user property key-value pairs"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"callback"}),(0,n.jsx)(s.td,{children:"ResponseCallback?"}),(0,n.jsx)(s.td,{children:"Optional"}),(0,n.jsx)(s.td,{children:"Callback to handle function response"})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-swift",children:'Collect.getInstance()?.setUserProperties([\n    "subscription": "premium",\n    "age": 28,\n    "city": "San Francisco"\n])\n'})}),"\n",(0,n.jsx)(s.p,{children:"The detailed user properties will be passed in the payload:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",metastring:'title="Detailed page properties in payload" {7-12}',children:'    "events": [\n        {\n        "event": {\n            "eventName": "set_user_properties",\n            "eventTimestamp": 1745959356443\n        },\n        "user": {\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "subscription": "premium",\n            "age": 28,\n            "city": "San Francisco"\n        },\n        "page": { /* ... */ },\n        "version": "1.3.8"\n        }\n    ]\n'})}),"\n",(0,n.jsx)(s.h2,{id:"set-user-properties-with-callbacks",children:"Set User properties with callbacks"}),"\n",(0,n.jsxs)(s.p,{children:["You can also set user properties with Callback function as shown below. The data parameter is an object that contains ",(0,n.jsx)(s.code,{children:"status"})," and ",(0,n.jsx)(s.code,{children:"message"})," which helps to debug the status of the function call."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-swift",children:'Collect.getInstance()?.setUserProperties([\n    "subscription": "premium",\n    "age": 28,\n    "city": "San Francisco"\n    ], {data in \n        // Implement function to handle response\n        // [status: "SUCCESS", message: "User properties set successfully"]\n    }\n)\n'})}),"\n",(0,n.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Use Descriptive Keys"}),": Use clear, consistent naming conventions for property keys."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Avoid Frequent Changes"}),": User properties should represent stable attributes. For frequently changing data, use event tracking instead."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Consistent Data Types"}),": Keep the same data type for each property key across all calls."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Limit Property Count"}),": While there's no strict limit, avoid setting hundreds of properties for performance reasons."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);