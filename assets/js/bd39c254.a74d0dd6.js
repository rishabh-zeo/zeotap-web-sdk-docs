"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[4301],{7690:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>d,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"events/userIdentities","title":"Tracking User Identities","description":"User identities help link user behavior across sessions and devices. The Zeotap Android SDK provides robust identity management with automatic hashing and flexible configuration options.","source":"@site/docs/androidsdk/events/userIdentities.md","sourceDirName":"events","slug":"/events/userIdentities","permalink":"/zeotap-web-sdk-docs/androidsdk/docs/events/userIdentities","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1749460137000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Tracking User Identities"},"sidebar":"DocumentationSidebar","previous":{"title":"Tracking Page Views","permalink":"/zeotap-web-sdk-docs/androidsdk/docs/events/pageViews"},"next":{"title":"Tracking User Actions","permalink":"/zeotap-web-sdk-docs/androidsdk/docs/events/trackingUserActions"}}');var t=n(4848),a=n(8453);const d={sidebar_position:2,title:"Tracking User Identities"},r="User Identities",l={},h=[{value:"Overview",id:"overview",level:2},{value:"Default User Identification",id:"default-user-identification",level:2},{value:"Zeotap Identifier (zi)",id:"zeotap-identifier-zi",level:3},{value:"Managing zi",id:"managing-zi",level:3},{value:"Setting User Identities",id:"setting-user-identities",level:2},{value:"Basic Identity Setting",id:"basic-identity-setting",level:3},{value:"Supported Identity Types",id:"supported-identity-types",level:3},{value:"Identity Hashing",id:"identity-hashing",level:2},{value:"Automatic Hashing Configuration",id:"automatic-hashing-configuration",level:3},{value:"Hashing Scenarios",id:"hashing-scenarios",level:3},{value:"Scenario 1: Raw Identities, No Hashing",id:"scenario-1-raw-identities-no-hashing",level:4},{value:"Scenario 2: Raw Identities, Auto-Hash",id:"scenario-2-raw-identities-auto-hash",level:4},{value:"Scenario 3: Pre-Hashed Identities",id:"scenario-3-pre-hashed-identities",level:4},{value:"Hashed Identity Formats",id:"hashed-identity-formats",level:2},{value:"Email Hash Formats",id:"email-hash-formats",level:3},{value:"Phone Number Hash Formats",id:"phone-number-hash-formats",level:3},{value:"Login ID Hash Formats",id:"login-id-hash-formats",level:3},{value:"Identity Management Patterns",id:"identity-management-patterns",level:2},{value:"User Registration",id:"user-registration",level:3},{value:"User Login",id:"user-login",level:3},{value:"User Logout",id:"user-logout",level:3},{value:"Profile Update",id:"profile-update",level:3},{value:"Identity with Callbacks",id:"identity-with-callbacks",level:2},{value:"Identity Payload Structure",id:"identity-payload-structure",level:2}];function o(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"user-identities",children:"User Identities"})}),"\n",(0,t.jsx)(i.p,{children:"User identities help link user behavior across sessions and devices. The Zeotap Android SDK provides robust identity management with automatic hashing and flexible configuration options."}),"\n",(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(i.p,{children:["The SDK automatically generates a unique identifier (",(0,t.jsx)(i.code,{children:"zi"}),") for each user and allows you to associate additional identities like email, phone number, and login ID."]}),"\n",(0,t.jsx)(i.h2,{id:"default-user-identification",children:"Default User Identification"}),"\n",(0,t.jsx)(i.h3,{id:"zeotap-identifier-zi",children:"Zeotap Identifier (zi)"}),"\n",(0,t.jsxs)(i.p,{children:["The SDK automatically creates a unique ",(0,t.jsx)(i.code,{children:"zi"})," (Zeotap Identifier) for each user:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'Collect collect = Collect.getInstance();\n\n// Get the current zi value\nString userZi = collect.getZI();\nLog.d("Zeotap", "User ZI: " + userZi);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"managing-zi",children:"Managing zi"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// Reset zi (useful for user logout scenarios)\ncollect.resetZI();\n\n// Set custom zi (e.g., using your own user ID)\ncollect.setZI("custom_user_id_123");\n'})}),"\n",(0,t.jsx)(i.h2,{id:"setting-user-identities",children:"Setting User Identities"}),"\n",(0,t.jsx)(i.h3,{id:"basic-identity-setting",children:"Basic Identity Setting"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'Map<String, String> userIdentities = new HashMap<>();\nuserIdentities.put("email", "user@example.com");\nuserIdentities.put("loginid", "user123");\nuserIdentities.put("cellno", "1234567890");\nuserIdentities.put("cellno_cc", "1-1234567890");\n\ncollect.setUserIdentities(userIdentities);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"supported-identity-types",children:"Supported Identity Types"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Identity Key"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"}),(0,t.jsx)(i.th,{children:"Example"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"email"})}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"User's email address"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:'"user@example.com"'})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"loginid"})}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"App-specific login ID"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:'"user123"'})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"cellno"})}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Phone number without country code"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:'"1234567890"'})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"cellno_cc"})}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Phone number with country code"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:'"1-1234567890"'})})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"identity-hashing",children:"Identity Hashing"}),"\n",(0,t.jsx)(i.h3,{id:"automatic-hashing-configuration",children:"Automatic Hashing Configuration"}),"\n",(0,t.jsx)(i.p,{children:"Configure how the SDK handles identity hashing during initialization:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'CollectOptions options = CollectOptions.builder(this)\n    .credential("<YOUR_WRITE_KEY>")\n    .areIdentitiesHashed(false)    // Identities are raw (not pre-hashed)\n    .hashIdentities(true)          // SDK should hash the raw identities\n    .build();\n'})}),"\n",(0,t.jsx)(i.h3,{id:"hashing-scenarios",children:"Hashing Scenarios"}),"\n",(0,t.jsx)(i.h4,{id:"scenario-1-raw-identities-no-hashing",children:"Scenario 1: Raw Identities, No Hashing"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// SDK Configuration\n.areIdentitiesHashed(false)\n.hashIdentities(false)\n\n// Usage\nMap<String, String> identities = new HashMap<>();\nidentities.put("email", "john.doe@gmail.com");\nidentities.put("cellno", "1234567890");\ncollect.setUserIdentities(identities);\n// Identities sent as-is (raw form)\n'})}),"\n",(0,t.jsx)(i.h4,{id:"scenario-2-raw-identities-auto-hash",children:"Scenario 2: Raw Identities, Auto-Hash"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// SDK Configuration\n.areIdentitiesHashed(false)\n.hashIdentities(true)\n\n// Usage\nMap<String, String> identities = new HashMap<>();\nidentities.put("email", "john.doe@gmail.com");\nidentities.put("cellno", "1234567890");\ncollect.setUserIdentities(identities);\n// SDK automatically generates SHA-256, SHA-1, MD5 hashes\n'})}),"\n",(0,t.jsx)(i.h4,{id:"scenario-3-pre-hashed-identities",children:"Scenario 3: Pre-Hashed Identities"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// SDK Configuration\n.areIdentitiesHashed(true)\n\n// Usage\nMap<String, String> identities = new HashMap<>();\nidentities.put("email_sha256_lowercase", "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3");\nidentities.put("cellno_sha256", "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");\ncollect.setUserIdentities(identities);\n'})}),"\n",(0,t.jsx)(i.h2,{id:"hashed-identity-formats",children:"Hashed Identity Formats"}),"\n",(0,t.jsx)(i.p,{children:"When using pre-hashed identities, use these specific key formats:"}),"\n",(0,t.jsx)(i.h3,{id:"email-hash-formats",children:"Email Hash Formats"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'Map<String, String> hashedIdentities = new HashMap<>();\n\n// SHA-256 variations\nhashedIdentities.put("email_sha256_lowercase", "sha256_hash_of_lowercase_email");\nhashedIdentities.put("email_sha256_uppercase", "sha256_hash_of_uppercase_email");\n\n// MD5 variations\nhashedIdentities.put("email_md5_lowercase", "md5_hash_of_lowercase_email");\nhashedIdentities.put("email_md5_uppercase", "md5_hash_of_uppercase_email");\n\n// SHA-1 variations\nhashedIdentities.put("email_sha1_lowercase", "sha1_hash_of_lowercase_email");\nhashedIdentities.put("email_sha1_uppercase", "sha1_hash_of_uppercase_email");\n'})}),"\n",(0,t.jsx)(i.h3,{id:"phone-number-hash-formats",children:"Phone Number Hash Formats"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// Without country code\nhashedIdentities.put("cellno_without_country_code_sha256", "hash_value");\nhashedIdentities.put("cellno_without_country_code_md5", "hash_value");\nhashedIdentities.put("cellno_without_country_code_sha1", "hash_value");\n\n// With country code\nhashedIdentities.put("cellno_with_country_code_sha256", "hash_value");\nhashedIdentities.put("cellno_with_country_code_md5", "hash_value");\nhashedIdentities.put("cellno_with_country_code_sha1", "hash_value");\n'})}),"\n",(0,t.jsx)(i.h3,{id:"login-id-hash-formats",children:"Login ID Hash Formats"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// Login ID variations\nhashedIdentities.put("loginid_sha256_lowercase", "hash_value");\nhashedIdentities.put("loginid_sha256_uppercase", "hash_value");\nhashedIdentities.put("loginid_md5_lowercase", "hash_value");\nhashedIdentities.put("loginid_md5_uppercase", "hash_value");\nhashedIdentities.put("loginid_sha1_lowercase", "hash_value");\nhashedIdentities.put("loginid_sha1_uppercase", "hash_value");\n'})}),"\n",(0,t.jsx)(i.h2,{id:"identity-management-patterns",children:"Identity Management Patterns"}),"\n",(0,t.jsx)(i.h3,{id:"user-registration",children:"User Registration"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// When user signs up\nMap<String, String> newUserIdentities = new HashMap<>();\nnewUserIdentities.put("email", userEmail);\nnewUserIdentities.put("loginid", userId);\nif (phoneNumber != null) {\n    newUserIdentities.put("cellno", phoneNumber);\n}\n\ncollect.setUserIdentities(newUserIdentities);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"user-login",children:"User Login"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// When user logs in\nMap<String, String> loginIdentities = new HashMap<>();\nloginIdentities.put("email", loginEmail);\nloginIdentities.put("loginid", loginUserId);\n\ncollect.setUserIdentities(loginIdentities);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"user-logout",children:"User Logout"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:"// Clear user identities on logout\ncollect.unSetUserIdentities();\n\n// Optionally reset the zi to differentiate users\ncollect.resetZI();\n"})}),"\n",(0,t.jsx)(i.h3,{id:"profile-update",children:"Profile Update"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// When user updates their profile\nMap<String, String> updatedIdentities = new HashMap<>();\nupdatedIdentities.put("email", newEmail);\nupdatedIdentities.put("cellno", newPhoneNumber);\n\ncollect.setUserIdentities(updatedIdentities);\n'})}),"\n",(0,t.jsx)(i.h2,{id:"identity-with-callbacks",children:"Identity with Callbacks"}),"\n",(0,t.jsx)(i.p,{children:"Handle identity setting responses:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'collect.setUserIdentities(identities, (response) -> {\n    if (response.containsKey("status")) {\n        String status = (String) response.get("status");\n        if ("success".equals(status)) {\n            Log.d("Zeotap", "Identities set successfully");\n        } else {\n            Log.e("Zeotap", "Failed to set identities: " + response.get("message"));\n        }\n    }\n});\n'})}),"\n",(0,t.jsx)(i.h2,{id:"identity-payload-structure",children:"Identity Payload Structure"}),"\n",(0,t.jsx)(i.p,{children:"When identities are set, they appear in event payloads:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\n  "event": { ... },\n  "page": { ... },\n  "user": {\n    "zi": "user-identifier",\n    "email": {\n      "sha256_lowercase": "hashed_email_value",\n      "sha256_uppercase": "hashed_email_value",\n      "md5_lowercase": "hashed_email_value",\n      "md5_uppercase": "hashed_email_value",\n      "sha1_lowercase": "hashed_email_value",\n      "sha1_uppercase": "hashed_email_value"\n    },\n    "loginid": {\n      "sha256_lowercase": "hashed_loginid_value",\n      // ... other hash variations\n    },\n    "cellphone_number_withoutcode": {\n      "sha256": "hashed_phone_value",\n      "md5": "hashed_phone_value",\n      "sha1": "hashed_phone_value"\n    },\n    "cellphone_number_withcode": {\n      "sha256": "hashed_phone_value",\n      "md5": "hashed_phone_value",\n      "sha1": "hashed_phone_value"\n    }\n  }\n}\n'})})]})}function c(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>r});var s=n(6540);const t={},a=s.createContext(t);function d(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(a.Provider,{value:i},e.children)}}}]);