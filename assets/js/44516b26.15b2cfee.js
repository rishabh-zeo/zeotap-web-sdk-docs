"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[233],{374:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"APIReference/setUserIdentities","title":"Tracking User Identities","description":"Persistently identify users by associating various identifiers with their activity.","source":"@site/docs/APIReference/setUserIdentities.md","sourceDirName":"APIReference","slug":"/APIReference/setUserIdentities","permalink":"/zeotap-web-sdk-docs/docs/APIReference/setUserIdentities","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/APIReference/setUserIdentities.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Tracking User Identities","description":"Persistently identify users by associating various identifiers with their activity."},"sidebar":"tutorialSidebar","previous":{"title":"Guides & References","permalink":"/zeotap-web-sdk-docs/docs/category/guides--references"},"next":{"title":"Tracking Page Views","permalink":"/zeotap-web-sdk-docs/docs/APIReference/setPageProperties"}}');var r=s(4848),a=s(8453);const t={sidebar_position:1,title:"Tracking User Identities",description:"Persistently identify users by associating various identifiers with their activity."},l="Tracking User Identities",d={},o=[{value:"Understanding Identifier Types",id:"understanding-identifier-types",level:2},{value:"Choosing Your Hashing Strategy",id:"choosing-your-hashing-strategy",level:2},{value:"Sending Raw Identifiers",id:"sending-raw-identifiers",level:3},{value:"Sending Pre-Hashed Identifiers",id:"sending-pre-hashed-identifiers",level:3},{value:"SDK Performs Hashing",id:"sdk-performs-hashing",level:3},{value:"Custom Identities",id:"custom-identities",level:2}];function h(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tracking-user-identities",children:"Tracking User Identities"})}),"\n",(0,r.jsxs)(n.p,{children:["This is a core function used to ",(0,r.jsx)(n.strong,{children:"associate specific identifiers"})," (like email, phone number, or your own internal IDs) with the current user's session and subsequent activities tracked by the Zeotap SDK."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why use it?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Stitching:"})," Allows Zeotap to link user activity across different sessions or devices when a known identifier is provided."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Enrichment:"})," Provides key identifiers needed for potential data enrichment processes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audience Building:"})," Enables creating audiences based on specific known identifiers."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Persistence",type:"tip",children:(0,r.jsxs)(n.p,{children:["Identifiers set using ",(0,r.jsx)(n.code,{children:"setUserIdentities()"})," are persisted (based on your ",(0,r.jsx)("a",{href:"../FAQs/whereIsDataStamped",children:(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"})})," configuration) and automatically included in the ",(0,r.jsx)(n.code,{children:"user"})," node of the payload for all subsequent events sent during the user's session(s)."]})}),"\n",(0,r.jsx)(n.h2,{id:"understanding-identifier-types",children:"Understanding Identifier Types"}),"\n",(0,r.jsx)(n.p,{children:"You can send different categories of identifiers:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Personal Identifiable Information (PII):"})," Standardized identifiers like email or phone number. These can be sent raw or pre-hashed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom Identities:"})," Your own first-party identifiers (e.g., ",(0,r.jsx)(n.code,{children:"crmId"}),", ",(0,r.jsx)(n.code,{children:"loyaltyId"}),"). Hashing configurations generally don't apply to these."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"choosing-your-hashing-strategy",children:"Choosing Your Hashing Strategy"}),"\n",(0,r.jsxs)(n.p,{children:["Before using ",(0,r.jsx)(n.code,{children:"setUserIdentities"}),", you must decide how PII (like email and phone numbers) will be handled regarding hashing. This choice affects your SDK configuration and the keys you use in the ",(0,r.jsx)(n.code,{children:"setUserIdentities"})," call. Click on each scenario below for details:"]}),"\n",(0,r.jsxs)("div",{style:{display:"flex",alignItems:"baseline",gap:"15px"},children:[(0,r.jsx)(n.h3,{id:"sending-raw-identifiers",children:"Sending Raw Identifiers"}),(0,r.jsx)("a",{href:"https://github.com/rishabh-zeo/zeotap-web-sdk-docs/blob/master/my-docs/static/examples/setUserIdentities_rawEx.html",target:"_blank",children:"View Example"})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Scenario 1: Sending Raw Identifiers (Implementation Steps)"})}),(0,r.jsx)("p",{children:"This approach involves sending the user's actual, readable identifiers (like email or phone number) directly to the Zeotap SDK. It's often the simplest method as you don't handle hashing yourself; Zeotap's backend takes care of processing."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Steps:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure the SDK Initialization:"}),"\nTo use this scenario, you ",(0,r.jsx)(n.strong,{children:"must"})," explicitly tell the SDK ",(0,r.jsx)(n.em,{children:"not"})," to perform hashing itself and confirm that the data you will provide is ",(0,r.jsx)(n.em,{children:"not"})," already hashed. This is done during the ",(0,r.jsx)(n.code,{children:"init"})," call:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="SDK Initialization for Raw Identifiers"',children:'window.zeotap.init("YOUR_WRITE_KEY", {\n  // --- Configuration for Scenario 1 ---\n  hashIdentities: false,      // Crucial: Tells the SDK *NOT* to hash the values itself.\n  areIdentitiesHashed: false  // Crucial: Confirms the values you\'ll provide are *NOT* already hashed.\n  \n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"This configuration ensures the SDK passes the raw values you provide directly to the Zeotap backend without attempting client-side hashing."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Send Identifiers Using Standard Keys and Raw Values:"}),"\nOnce the SDK is initialized correctly for this scenario, call ",(0,r.jsx)(n.code,{children:"setUserIdentities"}),". Use the standard, recognized keys for PII (like ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"cellno"}),", ",(0,r.jsx)(n.code,{children:"fpuid"}),", ",(0,r.jsx)(n.code,{children:"loginid"}),") and provide the ",(0,r.jsx)(n.strong,{children:"actual, raw user data"})," as the values. You can also include any custom identifiers."]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Email (Raw)"})}),(0,r.jsx)("p",{children:"To send the user's raw email address in Scenario 1:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the standard key: ",(0,r.jsx)("code",{children:"email"}),"."]}),(0,r.jsx)("li",{children:"Provide the actual, unhashed email address string as the value."})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Email"',children:"window.zeotap.setUserIdentities({\nemail: 'jane.doe@email.com' // Provide the actual email address\n});\n"})}),(0,r.jsxs)(n.p,{children:["The email will be passed in the payload of the ",(0,r.jsx)(n.code,{children:"https://spl.zeotap.com/fp?"})," call:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {12-12}',children:'    "events": [\n        {\n        "event": {\n            "id": "m9Tva77fUH4ILi3SPBBVn",\n            "eventName": "goToHome",\n            "eventTimestamp": 1745959356443\n        },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "email": "jane.doe@email.com" //raw email sent\n        },\n        "page": {\n            "path": "/product1",\n            "referrer": "https://test.zeotap.com/",\n            "url": "https://test.zeotap.com/product1"\n        },\n        "version": "4.4.3"\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.p,{children:["After calling ",(0,r.jsx)(n.code,{children:"setUserIdentities"})," with the raw email:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Network Call:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open your browser's Developer Tools (usually F12) and go to the ",(0,r.jsx)(n.strong,{children:"Network"})," tab."]}),"\n",(0,r.jsx)(n.li,{children:"Trigger an action that sends an event to Zeotap (e.g., a page view, a custom event)."}),"\n",(0,r.jsxs)(n.li,{children:["Find the network request going to the Zeotap endpoint (e.g., ",(0,r.jsx)(n.code,{children:"spl/fp?"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the ",(0,r.jsx)(n.strong,{children:"Payload"})," or ",(0,r.jsx)(n.strong,{children:"Request Body"})," of that request."]}),"\n",(0,r.jsxs)(n.li,{children:["Look for a ",(0,r.jsx)(n.code,{children:"user"}),". You should see the key-value pair ",(0,r.jsx)(n.code,{children:'"email": "jane.doe@email.com"'})," (the raw email you sent). Since ",(0,r.jsx)(n.code,{children:"hashIdentities"})," is ",(0,r.jsx)(n.code,{children:"false"}),", the SDK sends the value as-is."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Storage:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Application"})," tab in your browser's Developer Tools."]}),"\n",(0,r.jsxs)(n.li,{children:["Check either ",(0,r.jsx)(n.strong,{children:"Session Storage"})," or ",(0,r.jsx)(n.strong,{children:"Cookies"}),", depending on your ",(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"})," configuration (default is ",(0,r.jsx)(n.code,{children:"false"}),", meaning Session Storage)."]}),"\n",(0,r.jsx)(n.li,{children:"Look for keys related to Zeotap (e.g., `zpstorage*...*identities)."}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the stored Base64 encoded JSON object. You should find the ",(0,r.jsx)(n.code,{children:"email"})," key with the raw value ",(0,r.jsx)(n.code,{children:'"jane.doe@email.com"'})," stored as part of the user's persisted identity profile."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Cell Phone (Raw)"})}),(0,r.jsx)("p",{children:"To send the user's raw cell phone number in Scenario 1:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the standard key: ",(0,r.jsx)("code",{children:"cellno"}),"."]}),(0,r.jsx)("li",{children:"Provide the actual, unhashed phone number string as the value."}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Highly Recommended Format:"})," Use ",(0,r.jsx)("code",{children:"'[code] [number]'"})," (e.g., ",(0,r.jsx)("code",{children:"'1 5551234567'"}),"). While the SDK sends the raw value in this scenario, this format ensures the best processing and matching on the Zeotap backend."]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Cell Phone (Recommended Format)"',children:"window.zeotap.setUserIdentities({\n  cellno: '1 5551234567' // Provide the actual phone number\n});\n"})}),(0,r.jsx)("p",{children:(0,r.jsxs)("em",{children:["Note: The ",(0,r.jsx)("code",{children:"cellno_cc"})," key is deprecated. Always use ",(0,r.jsx)("code",{children:"cellno"})," for raw phone numbers. See ",(0,r.jsx)("a",{href:"../FAQs/howToSendCellno",children:"Cellno Handling Details"})," for more information on formatting implications, especially for other scenarios."]})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"cellno"})," will be passed in the payload of the ",(0,r.jsx)(n.code,{children:"https://spl.zeotap.com/fp?"})," call, within the ",(0,r.jsx)(n.code,{children:"user"})," object:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {12-12}',children:'    "events": [\n        {\n        "event": {\n            "id": "k8Lwb88gVI5JMj4TQCCWo",\n            "eventName": "pageView",\n            "eventTimestamp": 1745960123456\n        },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "cellno": "1 5551234567" // Raw cellno sent\n        },\n        "page": {\n            "path": "/contact",\n            "referrer": "https://test.zeotap.com",\n            "url": "https://test.zeotap.com/contact"\n        },\n        "version": "4.4.3"\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.p,{children:["After calling ",(0,r.jsx)(n.code,{children:"setUserIdentities"})," with the raw cell phone number:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Network Call:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open your browser's Developer Tools (usually F12) and go to the ",(0,r.jsx)(n.strong,{children:"Network"})," tab."]}),"\n",(0,r.jsx)(n.li,{children:"Trigger an action that sends an event to Zeotap (e.g., a page view, a custom event)."}),"\n",(0,r.jsxs)(n.li,{children:["Find the network request going to the Zeotap endpoint (e.g., ",(0,r.jsx)(n.code,{children:"spl/fp?"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the ",(0,r.jsx)(n.strong,{children:"Payload"})," or ",(0,r.jsx)(n.strong,{children:"Request Body"})," of that request."]}),"\n",(0,r.jsxs)(n.li,{children:["Look for a ",(0,r.jsx)(n.code,{children:"user"})," object. You should see the key-value pair ",(0,r.jsx)(n.code,{children:'"cellno": "1 5551234567"'})," (the raw phone number you sent), as highlighted above. Since ",(0,r.jsx)(n.code,{children:"hashIdentities"})," is ",(0,r.jsx)(n.code,{children:"false"}),", the SDK sends the value as-is."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Storage:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Application"})," tab in your browser's Developer Tools."]}),"\n",(0,r.jsxs)(n.li,{children:["Check either ",(0,r.jsx)(n.strong,{children:"Local Storage"})," or ",(0,r.jsx)(n.strong,{children:"Cookies"}),", depending on your ",(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"})," configuration (default is ",(0,r.jsx)(n.code,{children:"false"}),", meaning Local Storage)."]}),"\n",(0,r.jsxs)(n.li,{children:["Look for keys related to Zeotap (e.g., ",(0,r.jsx)(n.code,{children:"zpstorage*...*identities"})," or similar)."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the stored value (it might be Base64 encoded). Once decoded (if necessary), you should find the ",(0,r.jsx)(n.code,{children:"cellno"})," key with the raw value ",(0,r.jsx)(n.code,{children:'"1 5551234567"'})," stored as part of the user's persisted identity profile."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Login ID (Raw)"})}),(0,r.jsx)("p",{children:"To send the user's raw login ID in Scenario 1:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the standard key: ",(0,r.jsx)("code",{children:"loginid"}),"."]}),(0,r.jsx)("li",{children:"Provide the actual, unhashed login identifier string as the value."})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Login ID"',children:"window.zeotap.setUserIdentities({\n  loginid: 'janedoe99' // Provide the actual login ID\n});\n"})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"loginid"})," will be passed in the payload of the ",(0,r.jsx)(n.code,{children:"https://spl.zeotap.com/fp?"})," call, within the ",(0,r.jsx)(n.code,{children:"user"})," object:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {12-12}',children:'    "events": [\n        {\n         { /* ... */ },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "loginid": "janedoe99" // Raw loginid sent\n        },\n         { /* ... */ }\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.p,{children:["After calling ",(0,r.jsx)(n.code,{children:"setUserIdentities"})," with the raw login ID:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Network Call:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open your browser's Developer Tools (usually F12) and go to the ",(0,r.jsx)(n.strong,{children:"Network"})," tab."]}),"\n",(0,r.jsx)(n.li,{children:"Trigger an action that sends an event to Zeotap (e.g., a page view, a custom event after login)."}),"\n",(0,r.jsxs)(n.li,{children:["Find the network request going to the Zeotap endpoint (e.g., ",(0,r.jsx)(n.code,{children:"spl/fp?"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the ",(0,r.jsx)(n.strong,{children:"Payload"})," or ",(0,r.jsx)(n.strong,{children:"Request Body"})," of that request."]}),"\n",(0,r.jsxs)(n.li,{children:["Look for a ",(0,r.jsx)(n.code,{children:"user"})," object. You should see the key-value pair ",(0,r.jsx)(n.code,{children:'"loginid": "janedoe99"'})," (the raw login ID you sent), as highlighted above. Since ",(0,r.jsx)(n.code,{children:"hashIdentities"})," is ",(0,r.jsx)(n.code,{children:"false"}),", the SDK sends the value as-is."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Storage:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Application"})," tab in your browser's Developer Tools."]}),"\n",(0,r.jsxs)(n.li,{children:["Check either ",(0,r.jsx)(n.strong,{children:"Local Storage"})," or ",(0,r.jsx)(n.strong,{children:"Cookies"}),", depending on your ",(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"})," configuration (default is ",(0,r.jsx)(n.code,{children:"false"}),", meaning Local Storage)."]}),"\n",(0,r.jsxs)(n.li,{children:["Look for keys related to Zeotap (e.g., ",(0,r.jsx)(n.code,{children:"zpstorage*...*identities"})," or similar)."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the stored value (it might be Base64 encoded). Once decoded (if necessary), you should find the ",(0,r.jsx)(n.code,{children:"loginid"})," key with the raw value ",(0,r.jsx)(n.code,{children:'"janedoe99"'})," stored as part of the user's persisted identity profile."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)("div",{style:{display:"flex",alignItems:"baseline",gap:"15px"},children:[(0,r.jsx)(n.h3,{id:"sending-pre-hashed-identifiers",children:"Sending Pre-Hashed Identifiers"}),(0,r.jsx)("a",{href:"https://github.com/rishabh-zeo/zeotap-web-sdk-docs/blob/master/my-docs/static/examples/setUserIdentities_rawEx.html",target:"_blank",children:"View Example"})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Scenario 2: Sending Pre-Hashed Identifiers (Implementation Steps)"})}),(0,r.jsxs)("p",{children:["In this scenario, your application (e.g., server-side or separate client-side logic) hashes PII ",(0,r.jsx)(n.em,{children:"before"})," sending it to the SDK. You must use specific keys corresponding to the hash type you generated."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Steps:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure the SDK Initialization:"}),"\nTell the SDK ",(0,r.jsx)(n.em,{children:"not"})," to hash again and that the values you provide ",(0,r.jsx)(n.em,{children:"are"})," already hashed."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="SDK Initialization for Pre-Hashed Identifiers"',children:'window.zeotap.init("YOUR_WRITE_KEY", {\n  // --- Configuration for Scenario 2 ---\n  hashIdentities: false,      // Optional but good practice: Tell SDK NOT to hash again.\n  areIdentitiesHashed: true   // Crucial: Tells the SDK the values ARE pre-hashed.\n  \n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"This configuration ensures the SDK expects hashed keys and values."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Send Identifiers using ",(0,r.jsx)(n.code,{children:"setUserIdentities"}),":"]}),"\nUse the specific ",(0,r.jsx)(n.strong,{children:"hashed keys"})," that match your hashing algorithm and format, providing the pre-computed hash value. Expand the relevant PII type below:"]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Email (Hashed)"})}),(0,r.jsx)("p",{children:"To send a pre-hashed email address in Scenario 2:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the key corresponding exactly to your hash method and case (e.g., ",(0,r.jsx)("code",{children:"email_sha256_lowercase"}),", ",(0,r.jsx)("code",{children:"email_md5_uppercase"}),")."]}),(0,r.jsx)("li",{children:"Provide the pre-computed hash string as the value."})]}),(0,r.jsx)("p",{children:(0,r.jsx)("em",{children:"Supported hash types: SHA-256, MD5, SHA-1 (lowercase/uppercase variants)."})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Pre-Hashed Email (SHA-256 Lowercase)"',children:"// Assume 'hashedEmailValue' contains the SHA-256 hash of the lowercase email\nconst hashedEmailValue = 'a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2';\n\nwindow.zeotap.setUserIdentities({\n  email_sha256_lowercase: hashedEmailValue\n});\n"})}),(0,r.jsxs)(n.p,{children:["The specific hashed email key and value will be passed in the payload of the ",(0,r.jsx)(n.code,{children:"https://spl.zeotap.com/fp?"})," call:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {8-8}',children:'    "events": [\n        {\n         { /* ... */ },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "email": { "sha256_lowercase": "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2" } // Hashed key/value sent\n        },\n         { /* ... */ },\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.p,{children:["After calling ",(0,r.jsx)(n.code,{children:"setUserIdentities"})," with the pre-hashed email:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Network Call:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open Developer Tools (F12) -> ",(0,r.jsx)(n.strong,{children:"Network"})," tab."]}),"\n",(0,r.jsxs)(n.li,{children:["Trigger an event. Find the request to the Zeotap endpoint (e.g., ",(0,r.jsx)(n.code,{children:"spl/fp?"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the ",(0,r.jsx)(n.strong,{children:"Payload"}),". Look for the ",(0,r.jsx)(n.code,{children:"user"})," object. You should see the specific PII key (e.g., ",(0,r.jsx)(n.code,{children:'"email"'}),") and the corresponding hash value you provided."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Storage:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Application"})," tab -> ",(0,r.jsx)(n.strong,{children:"Local Storage"})," or ",(0,r.jsx)(n.strong,{children:"Cookies"})," (based on ",(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Find the Zeotap storage key (e.g., ",(0,r.jsx)(n.code,{children:"zpstorage*...*identities"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the stored value (decode if needed). You should find the specific hashed key (e.g., ",(0,r.jsx)(n.code,{children:"email_sha256_lowercase"}),") and its hash value persisted."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Cell Phone (Hashed)"})}),(0,r.jsx)("p",{children:"To send a pre-hashed cell phone number in Scenario 2:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the key matching exactly how you hashed the number (e.g., ",(0,r.jsx)("code",{children:"cellno_with_country_code_sha256"}),", ",(0,r.jsx)("code",{children:"cellno_without_country_code_md5"}),")."]}),(0,r.jsx)("li",{children:"Provide the pre-computed hash string as the value."})]}),(0,r.jsx)("p",{children:(0,r.jsxs)("em",{children:["It's crucial to use the key that reflects your hashing source (with/without country code, E.164) and algorithm (SHA-256, MD5, SHA-1). See ",(0,r.jsx)("a",{href:"../FAQs/howToSendCellno",children:"Cellno Handling Details"}),"."]})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Pre-Hashed Cell Phone (SHA-256 with Country Code)"',children:"// Assume 'hashedPhoneValue' contains the SHA-256 hash of the phone including country code (e.g., '15551234567')\nconst hashedPhoneValue = 'f6e5d4c3b2a1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4';\n\nwindow.zeotap.setUserIdentities({\n  cellno_with_country_code_sha256: hashedPhoneValue\n});\n"})}),(0,r.jsx)(n.p,{children:"The specific hashed cell phone key and value will be passed in the payload:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {8-8}',children:'    "events": [\n        {\n         { /* ... */ },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "cellno_with_country_code": {"sha256": "f6e5d4c3b2a1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4"} // Hashed key/value sent\n        },\n         { /* ... */ },\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network Call:"})," Check the payload for the specific PII key (e.g., ",(0,r.jsx)(n.code,{children:'"cellno_with_country_code"'}),") and the hash value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Browser Storage:"})," Check the persisted identity profile for the specific hashed key and value."]}),"\n"]})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Login ID (Hashed)"})}),(0,r.jsx)("p",{children:"To send a pre-hashed login ID in Scenario 2:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the key corresponding exactly to your hash method and case (e.g., ",(0,r.jsx)("code",{children:"loginid_sha256_lowercase"}),", ",(0,r.jsx)("code",{children:"loginid_md5_uppercase"}),")."]}),(0,r.jsx)("li",{children:"Provide the pre-computed hash string as the value."})]}),(0,r.jsx)("p",{children:(0,r.jsx)("em",{children:"Supported hash types: SHA-256, MD5, SHA-1 (lowercase/uppercase variants)."})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Pre-Hashed Login ID (SHA-256 Lowercase)"',children:"// Assume 'hashedLoginIdValue' contains the SHA-256 hash of the lowercase login ID\nconst hashedLoginIdValue = 'g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2a3b4c5d6e7f8';\n\nwindow.zeotap.setUserIdentities({\n  loginid_sha256_lowercase: hashedLoginIdValue\n});\n"})}),(0,r.jsx)(n.p,{children:"The specific hashed login ID key and value will be passed in the payload:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload" {7-7}',children:'    "events": [\n        { /* ... */ },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            {"loginid":{"sha256_lowercase":"g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2a3b4c5d6e7f8"}} // Hashed key/value sent\n        },\n        { /* ... */ }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network Call:"})," Check the payload for the specific PII key (e.g., ",(0,r.jsx)(n.code,{children:'"loginide"'}),") and the hash value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Browser Storage:"})," Check the persisted profile for the specific hashed key and value."]}),"\n"]})]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)("div",{style:{display:"flex",alignItems:"baseline",gap:"15px"},children:[(0,r.jsx)(n.h3,{id:"sdk-performs-hashing",children:"SDK Performs Hashing"}),(0,r.jsx)("a",{href:"https://github.com/rishabh-zeo/zeotap-web-sdk-docs/blob/master/my-docs/static/examples/setUserIdentities_rawEx.html",target:"_blank",children:"View Example"})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"1rem"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Scenario 3: SDK Performs Hashing (Client-Side Implementation)"})}),(0,r.jsxs)("p",{children:["In this scenario, you provide raw PII to the SDK function, but configure the SDK to hash these values ",(0,r.jsx)(n.em,{children:"before"})," sending the data over the network. This enhances privacy by preventing raw PII from leaving the browser via SDK network requests."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Steps:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure the SDK Initialization:"}),"\nEnable the SDK's built-in hashing and confirm that the values you will provide are raw."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="SDK Initialization for SDK Hashing"',children:'window.zeotap.init("YOUR_WRITE_KEY", {\n  // --- Configuration for Scenario 3 ---\n  hashIdentities: true,       // Crucial: Tells the SDK TO perform hashing.\n  areIdentitiesHashed: false  // Crucial: Confirms the values you\'ll provide are RAW.\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"This configuration activates the SDK's internal hashing mechanism for specific PII keys."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Send Identifiers using ",(0,r.jsx)(n.code,{children:"setUserIdentities"}),":"]}),"\nUse the standard, recognized ",(0,r.jsx)(n.strong,{children:"raw keys"})," for PII and provide the ",(0,r.jsx)(n.strong,{children:"actual, raw user data"}),". The SDK will hash ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"cellno"}),", and ",(0,r.jsx)(n.code,{children:"loginid"})," internally before sending. Expand the relevant PII type below:"]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Email (Raw - SDK Hashes)"})}),(0,r.jsx)("p",{children:"To have the SDK hash the user's email address in Scenario 3:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the standard key: ",(0,r.jsx)("code",{children:"email"}),"."]}),(0,r.jsx)("li",{children:"Provide the actual, unhashed email address string as the value."})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Email (SDK will hash)"',children:"window.zeotap.setUserIdentities({\n  email: 'user@example.com' // Provide RAW email\n});\n"})}),(0,r.jsxs)(n.p,{children:["The SDK will hash the email (SHA-256 lowercase by default) and send the hashed value in the payload of the ",(0,r.jsx)(n.code,{children:"https://spl.zeotap.com/fp?"})," call:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload (SDK Hashed)" {8-15}',children:'    "events": [\n        {\n         { /* ... */ },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "email": {\n                "sha256_lowercase": "sha256_hash_of_user@example.com", // SDK generated\n                "sha256_uppercase": "sha256_hash_of_USER@EXAMPLE.COM", // SDK generated\n                "md5_lowercase": "md5_hash_of_user@example.com",   // SDK generated\n                "md5_uppercase": "md5_hash_of_USER@EXAMPLE.COM",   // SDK generated\n                "sha1_lowercase": "sha1_hash_of_user@example.com",  // SDK generated\n                "sha1_uppercase": "sha1_hash_of_USER@EXAMPLE.COM"   // SDK generated\n            }\n        },\n         { /* ... */ }\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.p,{children:["After calling ",(0,r.jsx)(n.code,{children:"setUserIdentities"})," with the raw email:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Network Call:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open Developer Tools (F12) -> ",(0,r.jsx)(n.strong,{children:"Network"})," tab."]}),"\n",(0,r.jsxs)(n.li,{children:["Trigger an event. Find the request to the Zeotap endpoint (e.g., ",(0,r.jsx)(n.code,{children:"spl/fp?"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the ",(0,r.jsx)(n.strong,{children:"Payload"}),". Look for the ",(0,r.jsx)(n.code,{children:"user"})," object. You should see the ",(0,r.jsx)(n.code,{children:'"email"'})," key containing an object with ",(0,r.jsx)(n.strong,{children:"multiple"})," SDK-generated hash key-value pairs (e.g., ",(0,r.jsx)(n.code,{children:'"sha256_lowercase": "..."'}),", ",(0,r.jsx)(n.code,{children:'"sha256_uppercase": "..."'}),", ",(0,r.jsx)(n.code,{children:'"md5_lowercase": "..."'}),", etc.), as highlighted above. You should ",(0,r.jsx)(n.strong,{children:"not"})," see the raw email address in the network payload under these keys."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Storage:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Application"})," tab -> ",(0,r.jsx)(n.strong,{children:"Local Storage"})," or ",(0,r.jsx)(n.strong,{children:"Cookies"})," (based on ",(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Find the Zeotap storage key (e.g., ",(0,r.jsx)(n.code,{children:"zpstorage*...*identities"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Inspect the stored value (decode if needed). You should find the ",(0,r.jsx)(n.strong,{children:"raw"})," ",(0,r.jsx)(n.code,{children:"email"})," key and the original value you provided (e.g., ",(0,r.jsx)(n.code,{children:'"User@Example.COM"'}),") stored, as persistence typically happens with the input provided to the function."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Cell Phone (Raw - SDK Hashes)"})}),(0,r.jsx)("p",{children:"To have the SDK hash the user's cell phone number in Scenario 3:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the standard key: ",(0,r.jsx)("code",{children:"cellno"}),"."]}),(0,r.jsx)("li",{children:"Provide the actual, unhashed phone number string as the value."}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"CRITICAL Format:"})," Use ",(0,r.jsx)("code",{children:"'[code] [number]'"})," (e.g., ",(0,r.jsx)("code",{children:"'1 5551234567'"}),"). This specific format is ",(0,r.jsx)(n.strong,{children:"essential"})," for the SDK to correctly identify the country code and national number, enabling it to generate multiple required hash types accurately."]})]}),(0,r.jsx)("p",{children:(0,r.jsxs)("em",{children:["Using other formats (like ",(0,r.jsx)(n.code,{children:"1555..."})," or just ",(0,r.jsx)(n.code,{children:"555..."}),") will lead to incorrect or incomplete hashes being generated by the SDK. See ",(0,r.jsx)("a",{href:"../FAQs/howToSendCellno",children:"Cellno Handling Details"}),"."]})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Cell Phone (SDK will hash - Format is CRITICAL)"',children:"window.zeotap.setUserIdentities({\n  cellno: '1 5551234567' // Provide RAW phone in '[code] [number]' format\n});\n"})}),(0,r.jsx)(n.p,{children:"The SDK will generate multiple hashes (SHA-256, MD5, SHA-1) for each representation (without country code, with country code, E.164) based on the correctly formatted input and send them in the payload:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload (SDK Hashed - Cellno Complete Example)" {8-22}',children:'    "events": [\n        {\n         { /* ... */ },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "cellno_without_country_code": { // Hashes of \'5551234567\'\n                "sha256": "sha256_hash_of_5551234567",\n                "md5": "md5_hash_of_5551234567",\n                "sha1": "sha1_hash_of_5551234567"\n            },\n            "cellno_with_country_code": { // Hashes of \'15551234567\'\n                "sha256": "sha256_hash_of_15551234567",\n                "md5": "md5_hash_of_15551234567",\n                "sha1": "sha1_hash_of_15551234567"\n            },\n            "cellphone_number_e164": { // Hashes of \'15551234567\'\n                "sha256": "sha256_hash_of_15551234567",\n                "md5": "md5_hash_of_15551234567",\n                "sha1": "sha1_hash_of_15551234567"\n            }\n        },\n         { /* ... */ }\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"(Note: Hash values shown are placeholders representing the different hashes generated by the SDK from '1 5551234567')."})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Network Call:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check the ",(0,r.jsx)(n.strong,{children:"Payload"})," of the Zeotap network request (e.g., ",(0,r.jsx)(n.code,{children:"spl/fp?"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Look for the ",(0,r.jsx)(n.code,{children:"user"})," object. You should see the keys for each representation (",(0,r.jsx)(n.code,{children:'"cellno_without_country_code"'}),", ",(0,r.jsx)(n.code,{children:'"cellno_with_country_code"'}),", ",(0,r.jsx)(n.code,{children:'"cellphone_number_e164"'}),"). Each of these should contain a nested object with keys for ",(0,r.jsx)(n.code,{children:'"sha256"'}),", ",(0,r.jsx)(n.code,{children:'"md5"'}),", and ",(0,r.jsx)(n.code,{children:'"sha1"'})," and their corresponding hash values, as highlighted above. You should ",(0,r.jsx)(n.strong,{children:"not"})," see the raw phone number (",(0,r.jsx)(n.code,{children:"1 5551234567"}),") in the payload for these keys."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Storage:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check the persisted identity profile in ",(0,r.jsx)(n.strong,{children:"Local Storage"})," / ",(0,r.jsx)(n.strong,{children:"Cookies"})," (based on ",(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["You should find the ",(0,r.jsx)(n.strong,{children:"raw"})," ",(0,r.jsx)(n.code,{children:"cellno"})," key and value (",(0,r.jsx)(n.code,{children:'"1 5551234567"'}),") stored."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(s,{style:{marginLeft:"20px"},children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Login ID (Raw - SDK Hashes)"})}),(0,r.jsx)("p",{children:"To have the SDK hash the user's login ID in Scenario 3:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Use the standard key: ",(0,r.jsx)("code",{children:"loginid"}),"."]}),(0,r.jsx)("li",{children:"Provide the actual, unhashed login identifier string as the value. The SDK handles case variations for different hash types."})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="Sending Raw Login ID (SDK will hash)"',children:"window.zeotap.setUserIdentities({\n  loginid: 'UserLogin123' // Provide RAW login ID (case doesn't matter for input)\n});\n"})}),(0,r.jsxs)(n.p,{children:["The SDK will generate multiple standard hashes (SHA-256, MD5, SHA-1, lower/upper case) and send them nested under the ",(0,r.jsx)(n.code,{children:"loginid"})," key in the payload:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Identities in payload (SDK Hashed - Login ID)" {8-14}',children:'    "events": [\n        {\n         { /* ... */ },\n        "user": {\n            "zs": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",\n            "zi": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",\n            "zi_domain": ".zeotap.com",\n            "loginid": {\n                "sha256_lowercase": "hash_of_userlogin123", // SDK generated\n                "sha256_uppercase": "hash_of_USERLOGIN123", // SDK generated\n                "md5_lowercase": "md5_hash_of_userlogin123",   // SDK generated\n                "md5_uppercase": "md5_hash_of_USERLOGIN123",   // SDK generated\n                "sha1_lowercase": "sha1_hash_of_userlogin123",  // SDK generated\n                "sha1_uppercase": "sha1_hash_of_USERLOGIN123"   // SDK generated\n            }\n        },\n         { /* ... */ }\n        }\n    ]\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"(Note: Hash values shown are placeholders representing the different hashes generated by the SDK from the input login ID)."})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verification:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Network Call:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check the ",(0,r.jsx)(n.strong,{children:"Payload"})," of the Zeotap network request (e.g., ",(0,r.jsx)(n.code,{children:"spl/fp?"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Look for the ",(0,r.jsx)(n.code,{children:"user"})," object. You should see the ",(0,r.jsx)(n.code,{children:'"loginid"'})," key containing an object with ",(0,r.jsx)(n.strong,{children:"multiple"})," SDK-generated hash key-value pairs (e.g., ",(0,r.jsx)(n.code,{children:'"sha256_lowercase": "..."'}),", ",(0,r.jsx)(n.code,{children:'"sha256_uppercase": "..."'}),", etc.), as highlighted above. You should ",(0,r.jsx)(n.strong,{children:"not"})," see the raw login ID in the network payload under these keys."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Storage:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check the persisted identity profile in ",(0,r.jsx)(n.strong,{children:"Local Storage"})," / ",(0,r.jsx)(n.strong,{children:"Cookies"})," (based on ",(0,r.jsx)(n.code,{children:"persistenceInCookieStorage"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["You should find the ",(0,r.jsx)(n.strong,{children:"raw"})," ",(0,r.jsx)(n.code,{children:"loginid"})," key and the original value you provided (e.g., ",(0,r.jsx)(n.code,{children:'"UserLogin123"'}),") stored."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PII Identifier Key Reference"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"PII Property"}),(0,r.jsxs)(n.th,{style:{textAlign:"left"},children:["Key to Use if Sending RAW ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.em,{children:"(Scenarios 1 & 3)"})]}),(0,r.jsxs)(n.th,{style:{textAlign:"left"},children:["Key to Use if Sending PRE-HASHED ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.em,{children:"(Scenario 2 Only)"})]}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description & Important Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"First-Party ID"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"fpuid"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"fpuid"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Your primary first-party user ID (e.g., CRM ID, DB ID). Typically sent raw using the ",(0,r.jsx)(n.code,{children:"fpuid"})," key regardless of the hashing scenario for other PII."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Email"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"email"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,r.jsx)(n.code,{children:"email_sha256_lowercase"}),",",(0,r.jsx)(n.code,{children:"email_sha256_uppercase"}),", ",(0,r.jsx)(n.code,{children:"email_md5_lowercase"}),", ",(0,r.jsx)(n.code,{children:"email_md5_uppercase"}),", ",(0,r.jsx)(n.code,{children:"email_sha1_lowercase"}),", ",(0,r.jsx)(n.code,{children:"email_sha1_uppercase"})]}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["User's email address. Use the ",(0,r.jsx)(n.code,{children:"email"})," key for raw input. Use one of the specific hashed keys (like ",(0,r.jsx)(n.code,{children:"email_sha256_lowercase"}),") if you provide a pre-hashed value."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Cell Phone"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"cellno"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,r.jsx)(n.code,{children:"cellno_without_country_code_sha256"}),", ",(0,r.jsx)(n.code,{children:"cellno_without_country_code_md5"}),", ",(0,r.jsx)(n.code,{children:"cellno_without_country_code_sha1"}),", ",(0,r.jsx)(n.code,{children:"cellno_with_country_code_sha256"}),", ",(0,r.jsx)(n.code,{children:"cellno_with_country_code_md5"}),",",(0,r.jsx)(n.code,{children:"cellno_with_country_code_sha1"})]}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["User's cell phone number. ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.strong,{children:"For Raw:"})," Use ",(0,r.jsx)(n.code,{children:"cellno"}),". ",(0,r.jsx)(n.strong,{children:"Recommended Format:"})," For best results, use ",(0,r.jsx)(n.code,{children:"'[code] [number]'"})," (e.g., ",(0,r.jsx)(n.code,{children:"'1 5551234567'"}),").** See Cellno Handling Details for specifics. ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.strong,{children:"For Pre-Hashed:"})," Use the specific key matching your hash type (e.g., ",(0,r.jsx)(n.code,{children:"cellno_with_country_code_sha256"}),"). ",(0,r.jsx)("br",{})," ",(0,r.jsxs)(n.em,{children:["Note: ",(0,r.jsx)(n.code,{children:"cellno_cc"})," for raw is deprecated, instead use ",(0,r.jsx)(n.code,{children:"cellno"}),"."]})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Login ID"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"loginid"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,r.jsx)(n.code,{children:"loginid_sha256_lowercase"}),",",(0,r.jsx)(n.code,{children:"loginid_sha256_uppercase"}),", ",(0,r.jsx)(n.code,{children:"loginid_md5_lowercase"}),", ",(0,r.jsx)(n.code,{children:"loginid_md5_uppercase"}),", ",(0,r.jsx)(n.code,{children:"loginid_sha1_lowercase"}),", ",(0,r.jsx)(n.code,{children:"loginid_sha1_uppercase"})]}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["User's login ID. Use the ",(0,r.jsx)(n.code,{children:"loginid"})," key for raw input. Use one of the specific hashed keys if you provide a pre-hashed value."]})]})]})]}),"\n",(0,r.jsx)(n.admonition,{title:"Depracated",type:"warning",children:(0,r.jsx)(n.p,{children:"cellno_cc is depreacted. It is recommened to use cellno for all cellphone number related scenarios."})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How to Use This Table:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Identify the PII Property"})," you want to send (e.g., Email, Cell Phone)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Determine your Hashing Scenario:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scenario 1 (Raw) or 3 (SDK Hashing):"}),' Look at the "Key to Use if Sending RAW" column. Use that key (e.g., ',(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"cellno"}),") and provide the ",(0,r.jsx)(n.em,{children:"raw"})," value. Pay attention to the recommended format for ",(0,r.jsx)(n.code,{children:"cellno"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scenario 2 (Pre-Hashed):"}),' Look at the "Key to Use if Sending PRE-HASHED" column. Choose the key that matches the ',(0,r.jsx)(n.em,{children:"exact"})," hashing algorithm and format you used (e.g., ",(0,r.jsx)(n.code,{children:"email_sha256_lowercase"}),", ",(0,r.jsx)(n.code,{children:"cellno_with_country_code_sha256"}),") and provide the ",(0,r.jsx)(n.em,{children:"pre-computed hash"})," value."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Remember:"})," For a single PII property (like email), you will use ",(0,r.jsx)(n.em,{children:"either"})," the raw key ",(0,r.jsx)(n.em,{children:"or"})," a hashed key in your ",(0,r.jsx)(n.code,{children:"setUserIdentities"})," call, never both simultaneously for the same piece of information."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"custom-identities",children:"Custom Identities"}),"\n",(0,r.jsx)(n.p,{children:"You can include any other key-value pairs representing your own first-party identifiers. These are sent as-is and are not affected by the PII hashing configurations."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"window.zeotap.setUserIdentities({\n  // PII Keys (Raw or Hashed depending on scenario)\n  email: 'user@example.com',\n  // Custom Keys\n  crmId: '12345-ABC',\n  loyaltyTier: 'Gold',\n  visitorId: 'ga_client_id_here'\n});\n"})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const r={},a=i.createContext(r);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);