"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[590],{5819:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Examples/consent_custom","title":"Custom consent","description":"Example for Custom consent","source":"@site/docs/Examples/consent_custom.md","sourceDirName":"Examples","slug":"/Examples/consent_custom","permalink":"/zeotap-web-sdk-docs/docs/Examples/consent_custom","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Examples/consent_custom.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Custom consent","description":"Example for Custom consent"},"sidebar":"tutorialSidebar","previous":{"title":"Default consent","permalink":"/zeotap-web-sdk-docs/docs/Examples/consent_default"},"next":{"title":"FAQ","permalink":"/zeotap-web-sdk-docs/docs/category/faq"}}');var s=n(4848),a=n(8453);const c={sidebar_position:5,title:"Custom consent",description:"Example for Custom consent"},i=void 0,r={},l=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Zeotap SDK - Consent Example (Manual Set)</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; padding: 20px; max-width: 700px; margin: auto; }\n        button { padding: 10px 15px; font-size: 1em; cursor: pointer; margin-top: 10px; margin-right: 10px; }\n        pre { background-color: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        .instructions { margin-top: 20px; border: 1px solid #ccc; padding: 15px; background-color: #f9f9f9; }\n        .consent-controls { margin-bottom: 20px; }\n    </style>\n\n    \x3c!-- 1. Zeotap SDK Integration Snippet --\x3e\n    <script type="text/javascript">\n      !function(e,t){var n=t.createElement("script");n.type="text/javascript",n.crossorigin="anonymous",n.async=!0,n.src="https://content.zeotap.com/sdk/qa/zeotap.min.js",n.onload=function(){};var s=t.getElementsByTagName("script")[0];s.parentNode.insertBefore(n,s);function o(e,t,n){function s(t){e[t]=function(){e[n].push([t].concat(Array.prototype.slice.call(arguments,0)))}}for(var o=0;o<t.length;o++)s(t[o])}var r=e.zeotap||{_q:[],_qcmp:[]};o(r,["init","setEventProperties","setUserProperties","setPageProperties","setMetaProperties","setUserIdentities","unsetUserIdentities","setZI"],"_q"),o(r,["setConsent","addAskForConsentActionListener"],"_qcmp"),e.zeotap=r}(window,document);\n    <\/script>\n\n    \x3c!-- 2. Initialize the SDK --\x3e\n    <script type="text/javascript">\n      // IMPORTANT: Replace "YOUR_WRITE_KEY" with your actual Zeotap Write Key\n      const writeKey = "YOUR_WRITE_KEY";\n\n      // Initialize WITH consent management enabled, but disable auto CMP check\n      const sdkOptions = {\n        useConsent: true,          // Enable consent features\n        checkForCMP: false,        // Disable automatic TCF CMP detection\n      };\n\n      window.zeotap.init(writeKey, sdkOptions);\n      console.log("Zeotap SDK Initialized (Consent Enabled, Manual Set Mode).");\n    <\/script>\n</head>\n<body>\n\n    <h1>Zeotap SDK: Consent Example (Manual <code>setConsent</code>)</h1>\n\n    <p>This page demonstrates using the <code>setConsent</code> method to manually provide consent signals to the SDK, typically after a user interacts with a custom consent banner.</p>\n    <p>The SDK is initialized with <code>useConsent: true</code> and <code>checkForCMP: false</code>.</p>\n    <p>The SDK requires consent for **track** for tracking in this example.</p>\n\n    <div class="consent-controls">\n        <h3>Simulate Consent Action:</h3>\n        <button id="allowButton">Allow track</button>\n        <button id="denyButton">Deny track</button>\n    </div>\n\n    <button id="eventButton">\'Test Event\' (Requires track)</button>\n\n    <div class="instructions">\n        <h3>How to Verify</h3>\n        <ol>\n            <li>Click "Allow Track". Check the console for the `setConsent` call.</li>\n            <li>Click "\'Test Event\'". Check the **Network** tab. The event request **should be sent** because consent for track was granted.</li>\n            <li>Click "Deny track". Check the console for the `setConsent` call.</li>\n            <li>Click "\'Test Event\'" again. Check the **Network** tab. The event request should **NOT** be sent because consent for track was revoked.</li>\n        </ol>\n    </div>\n\n    \x3c!-- 3. Script to handle the button clicks --\x3e\n    <script>\n        // --- Consent Button Handlers ---\n        document.getElementById(\'allowButton\').addEventListener(\'click\', function() {\n          \n            window.zeotap.setConsent({track: true});\n            console.log("Called window.zeotap.setConsent (Allowing track)");\n        });\n\n        document.getElementById(\'denyButton\').addEventListener(\'click\', function() {\n          \n          window.zeotap.setConsent({track: false});\n          console.log("Called window.zeotap.setConsent (Denying track)");\n      });\n\n        // --- Track Event Button Handler ---\n        document.getElementById(\'eventButton\').addEventListener(\'click\', function() {\n            const eventName = \'Test Event\';\n            const eventProps = { scenario: \'Manual Set Consent\', timestamp: Date.now() };\n\n            // Call track - SDK will internally check consent based on `setConsent` calls\n            window.zeotap.setEventProperties(eventName, eventProps);\n\n            // Log to console for verification\n            console.log(`Called window.zeotap.setEventProperties(\'${eventName}\') with:`, eventProps);\n        });\n    <\/script>\n\n</body>\n</html>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Try out this ",(0,s.jsx)("a",{href:"/examples/consent_customEx.html",target:"_blank",children:"example"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var o=n(6540);const s={},a=o.createContext(s);function c(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);