"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[7428],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},9328:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Examples/examples","title":"Implementation Examples","description":"This page provides practical examples of how to implement the Zeotap iOS SDK in common app scenarios.","source":"@site/docs/iossdk/Examples/examples.md","sourceDirName":"Examples","slug":"/Examples/","permalink":"/zeotap-web-sdk-docs/iossdk/docs/Examples/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752145107000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Implementation Examples"},"sidebar":"gtm","previous":{"title":"Examples","permalink":"/zeotap-web-sdk-docs/iossdk/docs/category/examples-2"}}');var a=t(4848),i=t(8453);const s={sidebar_position:1,title:"Implementation Examples"},o="iOS SDK Implementation Examples",l={},c=[{value:"Complete App Integration Example",id:"complete-app-integration-example",level:2},{value:"AppDelegate Setup",id:"appdelegate-setup",level:3},{value:"E-commerce App Example",id:"e-commerce-app-example",level:2},{value:"Product Catalog Integration",id:"product-catalog-integration",level:3},{value:"Shopping Cart Integration",id:"shopping-cart-integration",level:3},{value:"User Authentication Example",id:"user-authentication-example",level:2},{value:"Content App Example",id:"content-app-example",level:2},{value:"Gaming App Example",id:"gaming-app-example",level:2},{value:"Best Practices Summary",id:"best-practices-summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"ios-sdk-implementation-examples",children:"iOS SDK Implementation Examples"})}),"\n",(0,a.jsx)(n.p,{children:"This page provides practical examples of how to implement the Zeotap iOS SDK in common app scenarios."}),"\n",(0,a.jsx)(n.h2,{id:"complete-app-integration-example",children:"Complete App Integration Example"}),"\n",(0,a.jsx)(n.h3,{id:"appdelegate-setup",children:"AppDelegate Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:'import UIKit\nimport ZeotapCollect\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        \n        // Configure and initialize Zeotap Collect SDK\n        setupZeotapSDK()\n        \n        return true\n    }\n    \n    private func setupZeotapSDK() {\n        var collectOptions = CollectOption().writeKey(value: getWriteKeyForEnvironment())\n                                          .logging(value: isDebugMode())\n                                          .optout(value: false)\n                                          .build()\n        Collect.initialize(option: collectOptions)\n        \n        // Set up initial user properties\n        setInitialUserProperties()\n    }\n    \n    private func getWriteKeyForEnvironment() -> String {\n        #if DEBUG\n            return "zt_ios_dev_1234567890abcdef"\n        #else\n            return "zt_ios_prod_1234567890abcdef"\n        #endif\n    }\n    \n    private func isDebugMode() -> Bool {\n        #if DEBUG\n            return true\n        #else\n            return false\n        #endif\n    }\n    \n    private func setInitialUserProperties() {\n        Collect.getInstance()?.setUserProperties([\n            "appVersion": Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "unknown",\n            "deviceModel": UIDevice.current.model,\n            "osVersion": UIDevice.current.systemVersion,\n            "installDate": getInstallDate()\n        ])\n    }\n    \n    private func getInstallDate() -> String {\n        if let installDate = UserDefaults.standard.object(forKey: "app_install_date") as? Date {\n            let formatter = DateFormatter()\n            formatter.dateFormat = "yyyy-MM-dd"\n            return formatter.string(from: installDate)\n        } else {\n            let installDate = Date()\n            UserDefaults.standard.set(installDate, forKey: "app_install_date")\n            let formatter = DateFormatter()\n            formatter.dateFormat = "yyyy-MM-dd"\n            return formatter.string(from: installDate)\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"e-commerce-app-example",children:"E-commerce App Example"}),"\n",(0,a.jsx)(n.h3,{id:"product-catalog-integration",children:"Product Catalog Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:'import UIKit\nimport ZeotapCollect\n\nclass ProductListViewController: UIViewController {\n    \n    @IBOutlet weak var tableView: UITableView!\n    \n    var products: [Product] = []\n    var category: String = ""\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Track screen view\n        Collect.getInstance()?.setEventProperties( "Product List Viewed", [\n            "category": category,\n            "productCount": products.count\n        ])\n    }\n    \n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        \n        // Track time spent on category page\n        startTime = Date()\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        \n        if let startTime = startTime {\n            let timeSpent = Date().timeIntervalSince(startTime)\n            Collect.getInstance()?.setEventProperties( "Time Spent on Category", [\n                "category": category,\n                "timeSpent": timeSpent\n            ])\n        }\n    }\n    \n    private var startTime: Date?\n}\n\nclass ProductDetailViewController: UIViewController {\n    \n    var product: Product!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Track product view\n        Collect.getInstance()?.setEventProperties( "Product Viewed", [\n            "productId": product.id,\n            "productName": product.name,\n            "category": product.category,\n            "price": product.price,\n            "currency": "USD",\n            "brand": product.brand,\n            "inStock": product.inStock\n        ])\n    }\n    \n    @IBAction func addToCartTapped(_ sender: UIButton) {\n        // Add to cart logic\n        CartManager.shared.addProduct(product)\n        \n        // Track add to cart event\n        Collect.getInstance()?.setEventProperties( "Product Added to Cart", [\n            "productId": product.id,\n            "productName": product.name,\n            "price": product.price,\n            "currency": "USD",\n            "cartTotal": CartManager.shared.total,\n            "cartItemCount": CartManager.shared.itemCount\n        ])\n        \n        // Show confirmation\n        showAddToCartConfirmation()\n    }\n    \n    @IBAction func shareTapped(_ sender: UIButton) {\n        Collect.getInstance()?.setEventProperties( "Product Shared", [\n            "productId": product.id,\n            "shareMethod": "iOS Share Sheet"\n        ])\n        \n        // Show share sheet\n        showShareSheet()\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"shopping-cart-integration",children:"Shopping Cart Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:'import ZeotapCollect\n\nclass CartManager {\n    \n    static let shared = CartManager()\n    private var items: [CartItem] = []\n    \n    func addProduct(_ product: Product, quantity: Int = 1) {\n        if let existingIndex = items.firstIndex(where: { $0.product.id == product.id }) {\n            items[existingIndex].quantity += quantity\n        } else {\n            items.append(CartItem(product: product, quantity: quantity))\n        }\n        \n        // Track cart updated\n        Collect.getInstance()?.setEventProperties( "Cart Updated", [\n            "action": "add",\n            "productId": product.id,\n            "quantity": quantity,\n            "cartTotal": total,\n            "cartItemCount": itemCount\n        ])\n    }\n    \n    func removeProduct(_ product: Product) {\n        items.removeAll { $0.product.id == product.id }\n        \n        Collect.getInstance()?.setEventProperties( "Cart Updated", [\n            "action": "remove",\n            "productId": product.id,\n            "cartTotal": total,\n            "cartItemCount": itemCount\n        ])\n    }\n    \n    var total: Double {\n        return items.reduce(0) { $0 + ($1.product.price * Double($1.quantity)) }\n    }\n    \n    var itemCount: Int {\n        return items.reduce(0) { $0 + $1.quantity }\n    }\n}\n\nclass CheckoutViewController: UIViewController {\n    \n    @IBAction func completePurchase(_ sender: UIButton) {\n        let orderId = generateOrderId()\n        let items = CartManager.shared.items\n        \n        // Process payment...\n        processPayment { [weak self] success in\n            if success {\n                self?.trackPurchaseCompleted(orderId: orderId, items: items)\n                self?.clearCart()\n                self?.showPurchaseConfirmation()\n            } else {\n                self?.trackPurchaseFailed(orderId: orderId, items: items)\n                self?.showPurchaseError()\n            }\n        }\n    }\n    \n    private func trackPurchaseCompleted(orderId: String, items: [CartItem]) {\n        let itemsData = items.map { item in\n            return [\n                "productId": item.product.id,\n                "productName": item.product.name,\n                "quantity": item.quantity,\n                "price": item.product.price,\n                "category": item.product.category\n            ]\n        }\n        \n        Collect.getInstance()?.setEventProperties( "Purchase Completed", [\n            "orderId": orderId,\n            "totalAmount": CartManager.shared.total,\n            "currency": "USD",\n            "itemCount": CartManager.shared.itemCount,\n            "items": itemsData,\n            "paymentMethod": selectedPaymentMethod,\n            "shippingMethod": selectedShippingMethod\n        ])\n    }\n    \n    private func trackPurchaseFailed(orderId: String, items: [CartItem]) {\n        Collect.getInstance()?.setEventProperties( "Purchase Failed", [\n            "orderId": orderId,\n            "totalAmount": CartManager.shared.total,\n            "currency": "USD",\n            "itemCount": CartManager.shared.itemCount,\n            "failureReason": "Payment processing failed"\n        ])\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"user-authentication-example",children:"User Authentication Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:'import ZeotapCollect\n\nclass AuthenticationManager {\n    \n    static let shared = AuthenticationManager()\n    \n    func loginUser(email: String, password: String, completion: @escaping (Bool, User?) -> Void) {\n        // Perform login API call\n        APIManager.shared.login(email: email, password: password) { [weak self] result in\n            switch result {\n            case .success(let user):\n                self?.handleSuccessfulLogin(user: user)\n                completion(true, user)\n                \n            case .failure(let error):\n                self?.handleFailedLogin(email: email, error: error)\n                completion(false, nil)\n            }\n        }\n    }\n    \n    private func handleSuccessfulLogin(user: User) {\n        // Set user identities\n        Collect.getInstance()?.setUserIdentities([\n            "email": user.email,\n            "userId": user.id,\n            "phoneNumber": user.phoneNumber ?? ""\n        ])\n        \n        // Set user properties\n        Collect.getInstance()?.setUserProperties([\n            "accountType": user.accountType,\n            "signupDate": user.signupDate,\n            "isVerified": user.isVerified,\n            "subscription": user.subscription,\n            "totalOrders": user.totalOrders,\n            "lastLoginDate": Date()\n        ])\n        \n        // Track login event\n        Collect.getInstance()?.setEventProperties( "User Logged In", [\n            "method": "email_password",\n            "isFirstTime": user.isFirstTimeLogin\n        ])\n        \n        // Store user session\n        UserDefaults.standard.set(user.id, forKey: "current_user_id")\n    }\n    \n    private func handleFailedLogin(email: String, error: Error) {\n        Collect.getInstance()?.setEventProperties( "Login Failed", [\n            "method": "email_password",\n            "error": error.localizedDescription,\n            "email": email.isEmpty ? "empty" : "provided"\n        ])\n    }\n    \n    func logoutUser() {\n        // Clear user session\n        UserDefaults.standard.removeObject(forKey: "current_user_id")\n        \n        // Track logout\n        Collect.getInstance()?.setEventProperties( "User Logged Out")\n        \n        // Clear user identities (optional)\n        // Collect.getInstance().clearUserIdentities()\n    }\n    \n    func registerUser(email: String, password: String, userData: [String: Any], completion: @escaping (Bool, User?) -> Void) {\n        APIManager.shared.register(email: email, password: password, userData: userData) { [weak self] result in\n            switch result {\n            case .success(let user):\n                self?.handleSuccessfulRegistration(user: user)\n                completion(true, user)\n                \n            case .failure(let error):\n                self?.handleFailedRegistration(email: email, error: error)\n                completion(false, nil)\n            }\n        }\n    }\n    \n    private func handleSuccessfulRegistration(user: User) {\n        // Set user identities\n        Collect.getInstance()?.setUserIdentities([\n            "email": user.email,\n            "userId": user.id\n        ])\n        \n        // Set initial user properties\n        Collect.getInstance()?.setUserProperties([\n            "signupDate": Date(),\n            "accountType": "free",\n            "isVerified": false,\n            "signupMethod": "email"\n        ])\n        \n        // Track registration\n        Collect.getInstance()?.setEventProperties( "User Registered", [\n            "method": "email_password",\n            "referralSource": getReferralSource()\n        ])\n    }\n    \n    private func handleFailedRegistration(email: String, error: Error) {\n        Collect.getInstance()?.setEventProperties( "Registration Failed", [\n            "method": "email_password",\n            "error": error.localizedDescription\n        ])\n    }\n    \n    private func getReferralSource() -> String {\n        return UserDefaults.standard.string(forKey: "referral_source") ?? "direct"\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"content-app-example",children:"Content App Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:'import ZeotapCollect\n\nclass ArticleViewController: UIViewController {\n    \n    var article: Article!\n    private var readStartTime: Date?\n    private var scrollProgress: Double = 0\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Track article view\n        Collect.getInstance()?.setEventProperties( "Article Viewed", [\n            "articleId": article.id,\n            "title": article.title,\n            "category": article.category,\n            "author": article.author,\n            "publishDate": article.publishDate,\n            "wordCount": article.wordCount\n        ])\n        \n        readStartTime = Date()\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        \n        trackReadingSession()\n    }\n    \n    private func trackReadingSession() {\n        guard let startTime = readStartTime else { return }\n        \n        let readTime = Date().timeIntervalSince(startTime)\n        \n        Collect.getInstance()?.setEventProperties( "Article Reading Session", [\n            "articleId": article.id,\n            "readTime": readTime,\n            "scrollProgress": scrollProgress,\n            "completed": scrollProgress > 0.8\n        ])\n    }\n    \n    func scrollViewDidScroll(_ scrollView: UIScrollView) {\n        let progress = scrollView.contentOffset.y / (scrollView.contentSize.height - scrollView.frame.height)\n        scrollProgress = max(0, min(1, progress))\n        \n        // Track reading milestones\n        if scrollProgress >= 0.25 && !milestones.contains("25%") {\n            milestones.insert("25%")\n            trackReadingMilestone(milestone: "25%")\n        } else if scrollProgress >= 0.50 && !milestones.contains("50%") {\n            milestones.insert("50%")\n            trackReadingMilestone(milestone: "50%")\n        } else if scrollProgress >= 0.75 && !milestones.contains("75%") {\n            milestones.insert("75%")\n            trackReadingMilestone(milestone: "75%")\n        } else if scrollProgress >= 0.90 && !milestones.contains("completed") {\n            milestones.insert("completed")\n            trackReadingMilestone(milestone: "completed")\n        }\n    }\n    \n    private var milestones: Set<String> = []\n    \n    private func trackReadingMilestone(milestone: String) {\n        Collect.getInstance()?.setEventProperties( "Reading Milestone", [\n            "articleId": article.id,\n            "milestone": milestone,\n            "timeToMilestone": Date().timeIntervalSince(readStartTime ?? Date())\n        ])\n    }\n    \n    @IBAction func shareArticle(_ sender: UIButton) {\n        Collect.getInstance()?.setEventProperties( "Article Shared", [\n            "articleId": article.id,\n            "shareMethod": "iOS Share Sheet",\n            "readProgress": scrollProgress\n        ])\n        \n        showShareSheet()\n    }\n    \n    @IBAction func likeArticle(_ sender: UIButton) {\n        Collect.getInstance()?.setEventProperties( "Article Liked", [\n            "articleId": article.id,\n            "readProgress": scrollProgress\n        ])\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"gaming-app-example",children:"Gaming App Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:'import ZeotapCollect\n\nclass GameManager {\n    \n    static let shared = GameManager()\n    private var currentLevel: Int = 1\n    private var gameStartTime: Date?\n    \n    func startGame(level: Int) {\n        currentLevel = level\n        gameStartTime = Date()\n        \n        Collect.getInstance()?.setEventProperties( "Game Started", [\n            "level": level,\n            "gameMode": getCurrentGameMode(),\n            "playerLevel": getPlayerLevel()\n        ])\n    }\n    \n    func completeLevel(score: Int, stars: Int) {\n        guard let startTime = gameStartTime else { return }\n        \n        let playTime = Date().timeIntervalSince(startTime)\n        \n        Collect.getInstance()?.setEventProperties( "Level Completed", [\n            "level": currentLevel,\n            "score": score,\n            "stars": stars,\n            "playTime": playTime,\n            "attempts": getLevelAttempts(level: currentLevel)\n        ])\n        \n        // Update user properties\n        Collect.getInstance()?.setUserProperties([\n            "highestLevel": max(getPlayerLevel(), currentLevel),\n            "totalScore": getTotalScore() + score,\n            "totalPlayTime": getTotalPlayTime() + playTime\n        ])\n    }\n    \n    func failLevel(reason: String) {\n        guard let startTime = gameStartTime else { return }\n        \n        let playTime = Date().timeIntervalSince(startTime)\n        \n        Collect.getInstance()?.setEventProperties( "Level Failed", [\n            "level": currentLevel,\n            "reason": reason,\n            "playTime": playTime,\n            "attempts": getLevelAttempts(level: currentLevel) + 1\n        ])\n    }\n    \n    func purchaseItem(itemId: String, price: Double, currency: String) {\n        Collect.getInstance()?.setEventProperties( "In-App Purchase", [\n            "itemId": itemId,\n            "price": price,\n            "currency": currency,\n            "playerLevel": getPlayerLevel(),\n            "currentLevel": currentLevel\n        ])\n    }\n    \n    private func getCurrentGameMode() -> String {\n        // Implementation to get current game mode\n        return "classic"\n    }\n    \n    private func getPlayerLevel() -> Int {\n        return UserDefaults.standard.integer(forKey: "player_level")\n    }\n    \n    private func getLevelAttempts(level: Int) -> Int {\n        return UserDefaults.standard.integer(forKey: "level_\\(level)_attempts")\n    }\n    \n    private func getTotalScore() -> Int {\n        return UserDefaults.standard.integer(forKey: "total_score")\n    }\n    \n    private func getTotalPlayTime() -> TimeInterval {\n        return UserDefaults.standard.double(forKey: "total_play_time")\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Initialize Early"}),": Set up the SDK in ",(0,a.jsx)(n.code,{children:"AppDelegate.application(_:didFinishLaunchingWithOptions:)"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Use Meaningful Event Names"}),": Choose descriptive, consistent event names"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Include Relevant Properties"}),": Add contextual information to events"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Set User Properties"}),": Update user properties when they change"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Handle Different Environments"}),": Use different configurations for development and production"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Track Key User Journey Points"}),": Focus on important user actions and milestones"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Respect Privacy"}),": Always ensure proper consent before tracking"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Test Thoroughly"}),": Verify events are being sent correctly in development"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);