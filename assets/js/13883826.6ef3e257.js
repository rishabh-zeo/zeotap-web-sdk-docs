"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[6978],{2440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Consent/customConsent","title":"Custom Consent Management","description":"Manually manage user consent using the Zeotap React Native SDK\'s setConsent API when not using a TCFv2 CMP.","source":"@site/docs/reactnativesdk/Consent/customConsent.md","sourceDirName":"Consent","slug":"/Consent/customConsent","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/Consent/customConsent","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752145107000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Custom Consent Management","description":"Manually manage user consent using the Zeotap React Native SDK\'s setConsent API when not using a TCFv2 CMP."},"sidebar":"DocumentationSidebar","previous":{"title":"TCF v2.x / GDPR Compliance","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/Consent/gdpr"},"next":{"title":"Examples","permalink":"/zeotap-web-sdk-docs/reactnativesdk/docs/Examples/"}}');var o=t(4848),i=t(8453);const a={sidebar_position:4,title:"Custom Consent Management",description:"Manually manage user consent using the Zeotap React Native SDK's setConsent API when not using a TCFv2 CMP."},r="Custom Consent Management (setConsent API)",c={},l=[{value:"How it Works",id:"how-it-works",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Testing Custom Consent",id:"testing-custom-consent",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"custom-consent-management-setconsent-api",children:"Custom Consent Management (setConsent API)"})}),"\n",(0,o.jsxs)(n.p,{children:["This approach allows you to manage user consent using your own custom logic and user interface (like a custom consent dialog or integration with a non-TCF CMP) and then communicate the user's choices directly to the Zeotap React Native SDK using the ",(0,o.jsx)(n.a,{href:"../APIReference/setConsent",children:(0,o.jsx)(n.code,{children:"setConsent"})})," API call."]}),"\n",(0,o.jsx)(n.p,{children:"This method is suitable when:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"You are not using an IAB TCF v2.x compliant Consent Management Platform (CMP)."}),"\n",(0,o.jsx)(n.li,{children:"You have built your own consent collection mechanism."}),"\n",(0,o.jsx)(n.li,{children:"You need fine-grained control over when and how consent signals are passed to the SDK."}),"\n",(0,o.jsx)(n.li,{children:"You are implementing consent requirements for regulations other than GDPR (though it can be used for GDPR if implemented correctly)."}),"\n",(0,o.jsx)(n.li,{children:"You want to integrate with a non-TCF CMP or custom privacy solution."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SDK Configuration:"})," You initialize the Zeotap SDK with specific options to indicate you will be managing consent manually."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User Interaction:"})," Your app presents a consent mechanism (e.g., a dialog, settings screen) to the user."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Capture Consent:"})," Your app's code captures the user's consent choices (e.g., accepting tracking, accepting specific data uses)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:["Call ",(0,o.jsx)(n.code,{children:"setConsent"}),":"]})," Your code calls the ",(0,o.jsx)(n.code,{children:"setConsent()"})," function, passing an object representing the user's consent status."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SDK Action:"})," The Zeotap SDK receives this consent object, stores it locally, and uses it to determine whether subsequent tracking calls should proceed."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["To enable Custom Consent Management, you ",(0,o.jsx)(n.strong,{children:"must"})," configure the SDK during initialization as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// SDK Initialization for Custom Consent\nimport { initialiseZeoCollect } from \'zeo-collect\';\n\nconst options = {\n    android_write_key: "YOUR_ANDROID_WRITE_KEY",\n    ios_write_key: "YOUR_IOS_WRITE_KEY",\n    // --- Configuration for Custom Consent ---\n    use_consent: true,           // REQUIRED: Enables consent features\n    check_for_cmp: false         // REQUIRED: Tells the SDK *not* to look for TCF CMP data\n};\n\ninitialiseZeoCollect(options);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"testing-custom-consent",children:"Testing Custom Consent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { setConsent } from 'zeo-collect';\n\n// Test granting consent\nsetConsent({ track: true });\n        \n// Test denying consent\nsetConsent({ track: false });\n        \n// Test mixed consent\nsetConsent({\n    track: true,\n    marketingConsent: false\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"../Configurations/consentOptions",children:"Consent Configuration Options"}),": Detailed configuration options for consent management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"../APIReference/setConsent",children:"Set Consent API"}),": Complete API reference for the setConsent method"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./consentStrategy",children:"Choosing a Consent Strategy"}),": Guide to choosing the right consent approach"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./gdpr",children:"GDPR/TCF Integration"}),": Alternative approach using TCF-compliant CMPs"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);